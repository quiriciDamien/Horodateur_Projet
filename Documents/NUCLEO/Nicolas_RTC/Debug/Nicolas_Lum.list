
Nicolas_Lum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00004530  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000453c  2000453c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023be0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004f6a  00000000  00000000  00043c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000fd02  00000000  00000000  00048b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001420  00000000  00000000  00058888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e8  00000000  00000000  00059ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b855  00000000  00000000  0005b590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008190  00000000  00000000  00066de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006ef75  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003cb0  00000000  00000000  0006eff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003cfc 	.word	0x08003cfc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08003cfc 	.word	0x08003cfc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f977 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f003 f984 	bl	8003830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f003 f960 	bl	80037ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20003fc4 	.word	0x20003fc4
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003fc4 	.word	0x20003fc4

08000558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
 800055a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800055c:	f7ff fff6 	bl	800054c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000560:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000562:	bf1c      	itt	ne
 8000564:	4b05      	ldrne	r3, [pc, #20]	; (800057c <HAL_Delay+0x24>)
 8000566:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000568:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800056a:	bf18      	it	ne
 800056c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800056e:	f7ff ffed 	bl	800054c <HAL_GetTick>
 8000572:	1b40      	subs	r0, r0, r5
 8000574:	4284      	cmp	r4, r0
 8000576:	d8fa      	bhi.n	800056e <HAL_Delay+0x16>
  {
  }
}
 8000578:	bd38      	pop	{r3, r4, r5, pc}
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000582:	4604      	mov	r4, r0
 8000584:	2800      	cmp	r0, #0
 8000586:	f000 809b 	beq.w	80006c0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800058a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800058c:	b925      	cbnz	r5, 8000598 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800058e:	f002 fe27 	bl	80031e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000592:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000594:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059a:	06db      	lsls	r3, r3, #27
 800059c:	f100 808e 	bmi.w	80006bc <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005a6:	f023 0302 	bic.w	r3, r3, #2
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005b0:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <HAL_ADC_Init+0x144>)
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005b8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	6861      	ldr	r1, [r4, #4]
 80005be:	430a      	orrs	r2, r1
 80005c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005c2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005c4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005d6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005d8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005da:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005de:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e0:	685a      	ldr	r2, [r3, #4]
 80005e2:	430a      	orrs	r2, r1
 80005e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005e6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005e8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005f6:	4934      	ldr	r1, [pc, #208]	; (80006c8 <HAL_ADC_Init+0x148>)
 80005f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005fa:	428a      	cmp	r2, r1
 80005fc:	d052      	beq.n	80006a4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000604:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000606:	6899      	ldr	r1, [r3, #8]
 8000608:	430a      	orrs	r2, r1
 800060a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800060c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800060e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800061a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800061c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800061e:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000620:	f022 0202 	bic.w	r2, r2, #2
 8000624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000626:	689a      	ldr	r2, [r3, #8]
 8000628:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800062c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800062e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000632:	2a00      	cmp	r2, #0
 8000634:	d03e      	beq.n	80006b4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000636:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000638:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800063a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800063e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000640:	685a      	ldr	r2, [r3, #4]
 8000642:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000646:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	3901      	subs	r1, #1
 800064c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000650:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000654:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000656:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065e:	3901      	subs	r1, #1
 8000660:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000666:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000668:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800066c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000678:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800067a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800067c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800067e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000684:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000686:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000688:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800068c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800068e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000692:	f023 0303 	bic.w	r3, r3, #3
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800069c:	2300      	movs	r3, #0
 800069e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006a2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006b2:	e7b2      	b.n	800061a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ba:	e7c9      	b.n	8000650 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006bc:	2001      	movs	r0, #1
 80006be:	e7ed      	b.n	800069c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006c0:	2001      	movs	r0, #1
}
 80006c2:	bd38      	pop	{r3, r4, r5, pc}
 80006c4:	40012300 	.word	0x40012300
 80006c8:	0f000001 	.word	0x0f000001

080006cc <HAL_ADC_ConfigChannel>:
{
 80006cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80006ce:	2300      	movs	r3, #0
 80006d0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d06e      	beq.n	80007b8 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006da:	680d      	ldr	r5, [r1, #0]
 80006dc:	6804      	ldr	r4, [r0, #0]
 80006de:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80006e0:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006e2:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80006e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006e8:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006ea:	d92a      	bls.n	8000742 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006ec:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80006f0:	68e7      	ldr	r7, [r4, #12]
 80006f2:	3b1e      	subs	r3, #30
 80006f4:	f04f 0e07 	mov.w	lr, #7
 80006f8:	fa0e fe03 	lsl.w	lr, lr, r3
 80006fc:	ea27 070e 	bic.w	r7, r7, lr
 8000700:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000702:	68e7      	ldr	r7, [r4, #12]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	433b      	orrs	r3, r7
 800070a:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800070c:	684a      	ldr	r2, [r1, #4]
 800070e:	2a06      	cmp	r2, #6
 8000710:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000714:	d825      	bhi.n	8000762 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000716:	4413      	add	r3, r2
 8000718:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800071a:	1f59      	subs	r1, r3, #5
 800071c:	231f      	movs	r3, #31
 800071e:	408b      	lsls	r3, r1
 8000720:	ea27 0303 	bic.w	r3, r7, r3
 8000724:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000726:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000728:	fa06 f101 	lsl.w	r1, r6, r1
 800072c:	4311      	orrs	r1, r2
 800072e:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000730:	4b32      	ldr	r3, [pc, #200]	; (80007fc <HAL_ADC_ConfigChannel+0x130>)
 8000732:	429c      	cmp	r4, r3
 8000734:	d034      	beq.n	80007a0 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 8000736:	2300      	movs	r3, #0
 8000738:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800073c:	4618      	mov	r0, r3
}
 800073e:	b003      	add	sp, #12
 8000740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000742:	6927      	ldr	r7, [r4, #16]
 8000744:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000748:	f04f 0e07 	mov.w	lr, #7
 800074c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000750:	ea27 070e 	bic.w	r7, r7, lr
 8000754:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000756:	6927      	ldr	r7, [r4, #16]
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	433b      	orrs	r3, r7
 800075e:	6123      	str	r3, [r4, #16]
 8000760:	e7d4      	b.n	800070c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000762:	2a0c      	cmp	r2, #12
 8000764:	d80e      	bhi.n	8000784 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000766:	4413      	add	r3, r2
 8000768:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800076a:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800076e:	231f      	movs	r3, #31
 8000770:	4093      	lsls	r3, r2
 8000772:	ea21 0303 	bic.w	r3, r1, r3
 8000776:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800077a:	fa06 f202 	lsl.w	r2, r6, r2
 800077e:	431a      	orrs	r2, r3
 8000780:	6322      	str	r2, [r4, #48]	; 0x30
 8000782:	e7d5      	b.n	8000730 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000784:	4413      	add	r3, r2
 8000786:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000788:	3b41      	subs	r3, #65	; 0x41
 800078a:	221f      	movs	r2, #31
 800078c:	409a      	lsls	r2, r3
 800078e:	ea21 0202 	bic.w	r2, r1, r2
 8000792:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000794:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000796:	fa06 f103 	lsl.w	r1, r6, r3
 800079a:	4311      	orrs	r1, r2
 800079c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800079e:	e7c7      	b.n	8000730 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007a0:	2d12      	cmp	r5, #18
 80007a2:	d10b      	bne.n	80007bc <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_ADC_ConfigChannel+0x134>)
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80007ac:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	e7be      	b.n	8000736 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 80007b8:	2002      	movs	r0, #2
 80007ba:	e7c0      	b.n	800073e <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_ADC_ConfigChannel+0x138>)
 80007be:	429d      	cmp	r5, r3
 80007c0:	d001      	beq.n	80007c6 <HAL_ADC_ConfigChannel+0xfa>
 80007c2:	2d11      	cmp	r5, #17
 80007c4:	d1b7      	bne.n	8000736 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_ADC_ConfigChannel+0x134>)
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80007ce:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007d6:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_ADC_ConfigChannel+0x138>)
 80007da:	429d      	cmp	r5, r3
 80007dc:	d1ab      	bne.n	8000736 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_ADC_ConfigChannel+0x13c>)
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_ADC_ConfigChannel+0x140>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80007e8:	230a      	movs	r3, #10
 80007ea:	4353      	muls	r3, r2
        counter--;
 80007ec:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80007ee:	9b01      	ldr	r3, [sp, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0a0      	beq.n	8000736 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80007f4:	9b01      	ldr	r3, [sp, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	e7f8      	b.n	80007ec <HAL_ADC_ConfigChannel+0x120>
 80007fa:	bf00      	nop
 80007fc:	40012000 	.word	0x40012000
 8000800:	40012300 	.word	0x40012300
 8000804:	10000012 	.word	0x10000012
 8000808:	20000008 	.word	0x20000008
 800080c:	000f4240 	.word	0x000f4240

08000810 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000812:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000814:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000818:	041b      	lsls	r3, r3, #16
 800081a:	0c1b      	lsrs	r3, r3, #16
 800081c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	0200      	lsls	r0, r0, #8
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800082a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800082c:	60d3      	str	r3, [r2, #12]
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000836:	b530      	push	{r4, r5, lr}
 8000838:	68dc      	ldr	r4, [r3, #12]
 800083a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000844:	2b04      	cmp	r3, #4
 8000846:	bf28      	it	cs
 8000848:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 0501 	mov.w	r5, #1
 8000850:	fa05 f303 	lsl.w	r3, r5, r3
 8000854:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000858:	bf8c      	ite	hi
 800085a:	3c03      	subhi	r4, #3
 800085c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085e:	4019      	ands	r1, r3
 8000860:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000862:	fa05 f404 	lsl.w	r4, r5, r4
 8000866:	3c01      	subs	r4, #1
 8000868:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800086a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	ea42 0201 	orr.w	r2, r2, r1
 8000870:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	bfad      	iteet	ge
 8000876:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	f000 000f 	andlt.w	r0, r0, #15
 800087e:	4b06      	ldrlt	r3, [pc, #24]	; (8000898 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	bfb5      	itete	lt
 8000886:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000890:	bd30      	pop	{r4, r5, pc}
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	e000ed14 	.word	0xe000ed14

0800089c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800089c:	2800      	cmp	r0, #0
 800089e:	db08      	blt.n	80008b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a0:	0942      	lsrs	r2, r0, #5
 80008a2:	2301      	movs	r3, #1
 80008a4:	f000 001f 	and.w	r0, r0, #31
 80008a8:	fa03 f000 	lsl.w	r0, r3, r0
 80008ac:	4b01      	ldr	r3, [pc, #4]	; (80008b4 <HAL_NVIC_EnableIRQ+0x18>)
 80008ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80008bc:	b129      	cbz	r1, 80008ca <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80008be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008c2:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80008c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c8:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008ca:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0U;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80008cc:	6822      	ldr	r2, [r4, #0]
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 80008ce:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 80008d0:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80008d2:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 80008d4:	68a3      	ldr	r3, [r4, #8]
 80008d6:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80008da:	4830      	ldr	r0, [pc, #192]	; (800099c <ETH_MACDMAConfig+0xe4>)
 80008dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e0:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80008e4:	bf0c      	ite	eq
 80008e6:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80008ea:	2100      	movne	r1, #0
 80008ec:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80008ee:	430b      	orrs	r3, r1
                       macinit.AutomaticPadCRCStrip | 
                       macinit.BackOffLimit | 
                       macinit.DeferralCheck);
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80008f0:	6013      	str	r3, [r2, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80008f2:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 80008f4:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80008f6:	f7ff fe2f 	bl	8000558 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80008fa:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80008fc:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 80008fe:	601d      	str	r5, [r3, #0]
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000900:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000902:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000904:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000906:	f7ff fe27 	bl	8000558 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	605d      	str	r5, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800090e:	2500      	movs	r5, #0
 8000910:	609d      	str	r5, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000912:	60dd      	str	r5, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8000914:	699a      	ldr	r2, [r3, #24]
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000916:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800091a:	0412      	lsls	r2, r2, #16
 800091c:	0c12      	lsrs	r2, r2, #16
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800091e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
                        macinit.UnicastPauseFrameDetect | 
                        macinit.ReceiveFlowControl |
                        macinit.TransmitFlowControl); 
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000922:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000924:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8000926:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000928:	f7ff fe16 	bl	8000558 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800092c:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800092e:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 8000930:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000932:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000934:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000936:	f7ff fe0f 	bl	8000558 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800093a:	6822      	ldr	r2, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 800093e:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000940:	f241 0518 	movw	r5, #4120	; 0x1018
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000944:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000946:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000948:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800094a:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800094e:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000952:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000954:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000956:	f7ff fdff 	bl	8000558 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800095a:	6823      	ldr	r3, [r4, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800095c:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800095e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000964:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000966:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000968:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800096a:	f7ff fdf5 	bl	8000558 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800096e:	6822      	ldr	r2, [r4, #0]
 8000970:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000974:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000976:	69a3      	ldr	r3, [r4, #24]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d107      	bne.n	800098c <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800097c:	f241 011c 	movw	r1, #4124	; 0x101c
 8000980:	5853      	ldr	r3, [r2, r1]
 8000982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098a:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800098c:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800098e:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000990:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000992:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000994:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <ETH_MACDMAConfig+0xf4>)
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	ff20810f 	.word	0xff20810f
 80009a0:	f8de3f23 	.word	0xf8de3f23
 80009a4:	02c12080 	.word	0x02c12080
 80009a8:	40028040 	.word	0x40028040
 80009ac:	40028044 	.word	0x40028044

080009b0 <HAL_ETH_ReadPHYRegister>:
{
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80009b2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80009b6:	2b82      	cmp	r3, #130	; 0x82
{
 80009b8:	4605      	mov	r5, r0
 80009ba:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80009bc:	d030      	beq.n	8000a20 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 80009be:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80009c0:	2382      	movs	r3, #130	; 0x82
 80009c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80009c6:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80009c8:	0189      	lsls	r1, r1, #6
 80009ca:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80009ce:	f003 011c 	and.w	r1, r3, #28
 80009d2:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80009d4:	8a04      	ldrh	r4, [r0, #16]
 80009d6:	02e4      	lsls	r4, r4, #11
 80009d8:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80009da:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80009dc:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80009e0:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 80009e2:	f7ff fdb3 	bl	800054c <HAL_GetTick>
 80009e6:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80009e8:	f014 0001 	ands.w	r0, r4, #1
 80009ec:	d107      	bne.n	80009fe <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80009ee:	682b      	ldr	r3, [r5, #0]
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80009f6:	2301      	movs	r3, #1
 80009f8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80009fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80009fe:	f7ff fda5 	bl	800054c <HAL_GetTick>
 8000a02:	1bc0      	subs	r0, r0, r7
 8000a04:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000a08:	d307      	bcc.n	8000a1a <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a10:	2300      	movs	r3, #0
 8000a12:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000a16:	2003      	movs	r0, #3
 8000a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000a1a:	682b      	ldr	r3, [r5, #0]
 8000a1c:	691c      	ldr	r4, [r3, #16]
 8000a1e:	e7e3      	b.n	80009e8 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000a20:	2002      	movs	r0, #2
}
 8000a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a24 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000a24:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000a28:	2b42      	cmp	r3, #66	; 0x42
{
 8000a2a:	b570      	push	{r4, r5, r6, lr}
 8000a2c:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000a2e:	d02e      	beq.n	8000a8e <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000a30:	2342      	movs	r3, #66	; 0x42
 8000a32:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000a36:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000a38:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000a3a:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000a3c:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000a40:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000a44:	f000 001c 	and.w	r0, r0, #28
 8000a48:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000a4a:	8a2c      	ldrh	r4, [r5, #16]
 8000a4c:	02e4      	lsls	r4, r4, #11
 8000a4e:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000a50:	4304      	orrs	r4, r0
 8000a52:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000a54:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000a56:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000a58:	f7ff fd78 	bl	800054c <HAL_GetTick>
 8000a5c:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000a5e:	f014 0001 	ands.w	r0, r4, #1
 8000a62:	d103      	bne.n	8000a6c <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000a64:	2301      	movs	r3, #1
 8000a66:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000a6c:	f7ff fd6e 	bl	800054c <HAL_GetTick>
 8000a70:	1b80      	subs	r0, r0, r6
 8000a72:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000a76:	d307      	bcc.n	8000a88 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000a84:	2003      	movs	r0, #3
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000a88:	682b      	ldr	r3, [r5, #0]
 8000a8a:	691c      	ldr	r4, [r3, #16]
 8000a8c:	e7e7      	b.n	8000a5e <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000a8e:	2002      	movs	r0, #2
}
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a94 <HAL_ETH_Init>:
{
 8000a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	f000 80de 	beq.w	8000c5e <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000aa2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000aa6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000aaa:	b91b      	cbnz	r3, 8000ab4 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000aac:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000ab0:	f002 fbf2 	bl	8003298 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <HAL_ETH_Init+0x1d0>)
 8000aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ac0:	645a      	str	r2, [r3, #68]	; 0x44
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000acc:	4b66      	ldr	r3, [pc, #408]	; (8000c68 <HAL_ETH_Init+0x1d4>)
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000ad4:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	6a21      	ldr	r1, [r4, #32]
 8000ada:	430a      	orrs	r2, r1
 8000adc:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	f042 0201 	orr.w	r2, r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000aec:	f7ff fd2e 	bl	800054c <HAL_GetTick>
 8000af0:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	07d0      	lsls	r0, r2, #31
 8000afc:	d41d      	bmi.n	8000b3a <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000afe:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000b00:	f001 f8b2 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000b04:	4b59      	ldr	r3, [pc, #356]	; (8000c6c <HAL_ETH_Init+0x1d8>)
 8000b06:	4a5a      	ldr	r2, [pc, #360]	; (8000c70 <HAL_ETH_Init+0x1dc>)
 8000b08:	4403      	add	r3, r0
 8000b0a:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000b0c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000b10:	d822      	bhi.n	8000b58 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000b12:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000b16:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000b18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000b1c:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4620      	mov	r0, r4
 8000b22:	f7ff ff7f 	bl	8000a24 <HAL_ETH_WritePHYRegister>
 8000b26:	4605      	mov	r5, r0
 8000b28:	b368      	cbz	r0, 8000b86 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000b2e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000b30:	f7ff fec2 	bl	80008b8 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000b34:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000b38:	e00b      	b.n	8000b52 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000b3a:	f7ff fd07 	bl	800054c <HAL_GetTick>
 8000b3e:	1b40      	subs	r0, r0, r5
 8000b40:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000b44:	d9d5      	bls.n	8000af2 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000b46:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000b48:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000b4a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000b52:	4628      	mov	r0, r5
 8000b54:	b003      	add	sp, #12
 8000b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000b58:	4b46      	ldr	r3, [pc, #280]	; (8000c74 <HAL_ETH_Init+0x1e0>)
 8000b5a:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <HAL_ETH_Init+0x1e4>)
 8000b5c:	4403      	add	r3, r0
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d802      	bhi.n	8000b68 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000b62:	f045 050c 	orr.w	r5, r5, #12
 8000b66:	e7d6      	b.n	8000b16 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000b68:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <HAL_ETH_Init+0x1e8>)
 8000b6a:	4a45      	ldr	r2, [pc, #276]	; (8000c80 <HAL_ETH_Init+0x1ec>)
 8000b6c:	4403      	add	r3, r0
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d9d1      	bls.n	8000b16 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000b72:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <HAL_ETH_Init+0x1f0>)
 8000b74:	4a44      	ldr	r2, [pc, #272]	; (8000c88 <HAL_ETH_Init+0x1f4>)
 8000b76:	4403      	add	r3, r0
 8000b78:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000b7a:	bf94      	ite	ls
 8000b7c:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000b80:	f045 0510 	orrhi.w	r5, r5, #16
 8000b84:	e7c7      	b.n	8000b16 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000b86:	20ff      	movs	r0, #255	; 0xff
 8000b88:	f7ff fce6 	bl	8000558 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d053      	beq.n	8000c3a <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000b92:	f7ff fcdb 	bl	800054c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000b96:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000b9a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000b9c:	466a      	mov	r2, sp
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f7ff ff05 	bl	80009b0 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000ba6:	f7ff fcd1 	bl	800054c <HAL_GetTick>
 8000baa:	1b80      	subs	r0, r0, r6
 8000bac:	42b8      	cmp	r0, r7
 8000bae:	d90b      	bls.n	8000bc8 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f7ff fe80 	bl	80008b8 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000bc4:	2503      	movs	r5, #3
 8000bc6:	e7c4      	b.n	8000b52 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000bc8:	9b00      	ldr	r3, [sp, #0]
 8000bca:	0759      	lsls	r1, r3, #29
 8000bcc:	d5e6      	bpl.n	8000b9c <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	f7ff ff25 	bl	8000a24 <HAL_ETH_WritePHYRegister>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d1a5      	bne.n	8000b2a <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000bde:	f7ff fcb5 	bl	800054c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000be2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000be6:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000be8:	466a      	mov	r2, sp
 8000bea:	2101      	movs	r1, #1
 8000bec:	4620      	mov	r0, r4
 8000bee:	f7ff fedf 	bl	80009b0 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000bf2:	f7ff fcab 	bl	800054c <HAL_GetTick>
 8000bf6:	1b80      	subs	r0, r0, r6
 8000bf8:	42b8      	cmp	r0, r7
 8000bfa:	d8d9      	bhi.n	8000bb0 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000bfc:	9b00      	ldr	r3, [sp, #0]
 8000bfe:	069a      	lsls	r2, r3, #26
 8000c00:	d5f2      	bpl.n	8000be8 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000c02:	466a      	mov	r2, sp
 8000c04:	211f      	movs	r1, #31
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fed2 	bl	80009b0 <HAL_ETH_ReadPHYRegister>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	d18c      	bne.n	8000b2a <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000c10:	9b00      	ldr	r3, [sp, #0]
 8000c12:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000c16:	bf18      	it	ne
 8000c18:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000c1c:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000c1e:	bf4c      	ite	mi
 8000c20:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000c22:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000c26:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000c28:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f7ff fe43 	bl	80008b8 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000c38:	e78b      	b.n	8000b52 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000c3a:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000c3c:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000c3e:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000c40:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000c44:	b292      	uxth	r2, r2
 8000c46:	4629      	mov	r1, r5
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f7ff feeb 	bl	8000a24 <HAL_ETH_WritePHYRegister>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	f47f af6b 	bne.w	8000b2a <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000c54:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000c58:	f7ff fc7e 	bl	8000558 <HAL_Delay>
 8000c5c:	e7e5      	b.n	8000c2a <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000c5e:	2501      	movs	r5, #1
 8000c60:	e777      	b.n	8000b52 <HAL_ETH_Init+0xbe>
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	feced300 	.word	0xfeced300
 8000c70:	00e4e1bf 	.word	0x00e4e1bf
 8000c74:	fde9f140 	.word	0xfde9f140
 8000c78:	017d783f 	.word	0x017d783f
 8000c7c:	fc6c7900 	.word	0xfc6c7900
 8000c80:	026259ff 	.word	0x026259ff
 8000c84:	fa0a1f00 	.word	0xfa0a1f00
 8000c88:	02faf07f 	.word	0x02faf07f

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c90:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c92:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c94:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000e5c <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c98:	4a6e      	ldr	r2, [pc, #440]	; (8000e54 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c9a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000e60 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ca0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000ca2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000ca8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cac:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000cb0:	45b6      	cmp	lr, r6
 8000cb2:	f040 80b6 	bne.w	8000e22 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb6:	684c      	ldr	r4, [r1, #4]
 8000cb8:	f024 0710 	bic.w	r7, r4, #16
 8000cbc:	2f02      	cmp	r7, #2
 8000cbe:	d116      	bne.n	8000cee <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000cc0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000cc4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ccc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000cd4:	f04f 0c0f 	mov.w	ip, #15
 8000cd8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000cdc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce0:	690d      	ldr	r5, [r1, #16]
 8000ce2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ce6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000cea:	f8ca 5020 	str.w	r5, [sl, #32]
 8000cee:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000cf4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf8:	fa05 f50a 	lsl.w	r5, r5, sl
 8000cfc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfe:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d02:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d06:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d0c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d10:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d12:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d16:	d811      	bhi.n	8000d3c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000d18:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d1a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1e:	68cf      	ldr	r7, [r1, #12]
 8000d20:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000d24:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000d28:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d2a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d2c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d30:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000d34:	409f      	lsls	r7, r3
 8000d36:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000d3a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d3c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	688f      	ldr	r7, [r1, #8]
 8000d42:	fa07 f70a 	lsl.w	r7, r7, sl
 8000d46:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000d48:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d4a:	00e5      	lsls	r5, r4, #3
 8000d4c:	d569      	bpl.n	8000e22 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	f04f 0b00 	mov.w	fp, #0
 8000d52:	f8cd b00c 	str.w	fp, [sp, #12]
 8000d56:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d5a:	4d3f      	ldr	r5, [pc, #252]	; (8000e58 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000d60:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000d64:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000d68:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000d6c:	9703      	str	r7, [sp, #12]
 8000d6e:	9f03      	ldr	r7, [sp, #12]
 8000d70:	f023 0703 	bic.w	r7, r3, #3
 8000d74:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d78:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d7c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d80:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d84:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000d88:	f04f 0e0f 	mov.w	lr, #15
 8000d8c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d90:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d92:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d96:	d04b      	beq.n	8000e30 <HAL_GPIO_Init+0x1a4>
 8000d98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d9c:	42a8      	cmp	r0, r5
 8000d9e:	d049      	beq.n	8000e34 <HAL_GPIO_Init+0x1a8>
 8000da0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000da4:	42a8      	cmp	r0, r5
 8000da6:	d047      	beq.n	8000e38 <HAL_GPIO_Init+0x1ac>
 8000da8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dac:	42a8      	cmp	r0, r5
 8000dae:	d045      	beq.n	8000e3c <HAL_GPIO_Init+0x1b0>
 8000db0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000db4:	42a8      	cmp	r0, r5
 8000db6:	d043      	beq.n	8000e40 <HAL_GPIO_Init+0x1b4>
 8000db8:	4548      	cmp	r0, r9
 8000dba:	d043      	beq.n	8000e44 <HAL_GPIO_Init+0x1b8>
 8000dbc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000dc0:	42a8      	cmp	r0, r5
 8000dc2:	d041      	beq.n	8000e48 <HAL_GPIO_Init+0x1bc>
 8000dc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dc8:	42a8      	cmp	r0, r5
 8000dca:	d03f      	beq.n	8000e4c <HAL_GPIO_Init+0x1c0>
 8000dcc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dd0:	42a8      	cmp	r0, r5
 8000dd2:	d03d      	beq.n	8000e50 <HAL_GPIO_Init+0x1c4>
 8000dd4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000dd8:	42a8      	cmp	r0, r5
 8000dda:	bf14      	ite	ne
 8000ddc:	250a      	movne	r5, #10
 8000dde:	2509      	moveq	r5, #9
 8000de0:	fa05 f50c 	lsl.w	r5, r5, ip
 8000de4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000dea:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000dec:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dee:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000df2:	bf0c      	ite	eq
 8000df4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000df6:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000df8:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000dfa:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e00:	bf0c      	ite	eq
 8000e02:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e04:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000e06:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e08:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	bf0c      	ite	eq
 8000e10:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e12:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000e14:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000e16:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e18:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e1a:	bf54      	ite	pl
 8000e1c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000e1e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000e20:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	3301      	adds	r3, #1
 8000e24:	2b10      	cmp	r3, #16
 8000e26:	f47f af3c 	bne.w	8000ca2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000e2a:	b005      	add	sp, #20
 8000e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e30:	465d      	mov	r5, fp
 8000e32:	e7d5      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e34:	2501      	movs	r5, #1
 8000e36:	e7d3      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e38:	2502      	movs	r5, #2
 8000e3a:	e7d1      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e3c:	2503      	movs	r5, #3
 8000e3e:	e7cf      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e40:	2504      	movs	r5, #4
 8000e42:	e7cd      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e44:	2505      	movs	r5, #5
 8000e46:	e7cb      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e48:	2506      	movs	r5, #6
 8000e4a:	e7c9      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e4c:	2507      	movs	r5, #7
 8000e4e:	e7c7      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e50:	2508      	movs	r5, #8
 8000e52:	e7c5      	b.n	8000de0 <HAL_GPIO_Init+0x154>
 8000e54:	40013c00 	.word	0x40013c00
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40021400 	.word	0x40021400

08000e64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e64:	b10a      	cbz	r2, 8000e6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e66:	6181      	str	r1, [r0, #24]
 8000e68:	4770      	bx	lr
 8000e6a:	0409      	lsls	r1, r1, #16
 8000e6c:	e7fb      	b.n	8000e66 <HAL_GPIO_WritePin+0x2>

08000e6e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e6e:	6801      	ldr	r1, [r0, #0]
 8000e70:	694b      	ldr	r3, [r1, #20]
 8000e72:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	d010      	beq.n	8000e9e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e7c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e80:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e82:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000e84:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000e86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e8a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e8e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	4770      	bx	lr
  }
  return HAL_OK;
 8000e9e:	4618      	mov	r0, r3
}
 8000ea0:	4770      	bx	lr

08000ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000ea2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4617      	mov	r7, r2
 8000eaa:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000eac:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000eb0:	b28e      	uxth	r6, r1
 8000eb2:	6825      	ldr	r5, [r4, #0]
 8000eb4:	f1b8 0f01 	cmp.w	r8, #1
 8000eb8:	bf0c      	ite	eq
 8000eba:	696b      	ldreq	r3, [r5, #20]
 8000ebc:	69ab      	ldrne	r3, [r5, #24]
 8000ebe:	ea36 0303 	bics.w	r3, r6, r3
 8000ec2:	bf14      	ite	ne
 8000ec4:	2001      	movne	r0, #1
 8000ec6:	2000      	moveq	r0, #0
 8000ec8:	b908      	cbnz	r0, 8000ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ece:	696b      	ldr	r3, [r5, #20]
 8000ed0:	055a      	lsls	r2, r3, #21
 8000ed2:	d516      	bpl.n	8000f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ed4:	682b      	ldr	r3, [r5, #0]
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000edc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000ee0:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ee2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000ee8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000eec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000ef0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ef2:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ef6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000ef8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000efc:	2001      	movs	r0, #1
 8000efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000f02:	1c7b      	adds	r3, r7, #1
 8000f04:	d0d5      	beq.n	8000eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f06:	f7ff fb21 	bl	800054c <HAL_GetTick>
 8000f0a:	eba0 0009 	sub.w	r0, r0, r9
 8000f0e:	4287      	cmp	r7, r0
 8000f10:	d301      	bcc.n	8000f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000f12:	2f00      	cmp	r7, #0
 8000f14:	d1cd      	bne.n	8000eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f16:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f18:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000f1a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000f1c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f26:	f042 0220 	orr.w	r2, r2, #32
 8000f2a:	e7e4      	b.n	8000ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000f2c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	460d      	mov	r5, r1
 8000f32:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	075b      	lsls	r3, r3, #29
 8000f3a:	d501      	bpl.n	8000f40 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff ff94 	bl	8000e6e <I2C_IsAcknowledgeFailed>
 8000f46:	b9a8      	cbnz	r0, 8000f74 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000f48:	1c6a      	adds	r2, r5, #1
 8000f4a:	d0f3      	beq.n	8000f34 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000f4c:	f7ff fafe 	bl	800054c <HAL_GetTick>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	4285      	cmp	r5, r0
 8000f54:	d301      	bcc.n	8000f5a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	d1ec      	bne.n	8000f34 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000f5a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f5c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000f5e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000f64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f68:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000f6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000f6e:	f042 0220 	orr.w	r2, r2, #32
 8000f72:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
}
 8000f76:	bd70      	pop	{r4, r5, r6, pc}

08000f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000f80:	6820      	ldr	r0, [r4, #0]
 8000f82:	6943      	ldr	r3, [r0, #20]
 8000f84:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000f88:	d001      	beq.n	8000f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000f8a:	2000      	movs	r0, #0
}
 8000f8c:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000f8e:	6942      	ldr	r2, [r0, #20]
 8000f90:	06d2      	lsls	r2, r2, #27
 8000f92:	d50e      	bpl.n	8000fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f94:	f06f 0210 	mvn.w	r2, #16
 8000f98:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f9a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000f9c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000f9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fa2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000fa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000fa8:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000faa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000fae:	2001      	movs	r0, #1
 8000fb0:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000fb2:	f7ff facb 	bl	800054c <HAL_GetTick>
 8000fb6:	1b80      	subs	r0, r0, r6
 8000fb8:	42a8      	cmp	r0, r5
 8000fba:	d801      	bhi.n	8000fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d1df      	bne.n	8000f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000fc0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000fc2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000fc4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000fc6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000fca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000fce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	e7e8      	b.n	8000fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000fd6 <I2C_WaitOnFlagUntilTimeout>:
{
 8000fd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fda:	9e08      	ldr	r6, [sp, #32]
 8000fdc:	4604      	mov	r4, r0
 8000fde:	4690      	mov	r8, r2
 8000fe0:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000fe2:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000fe6:	b28d      	uxth	r5, r1
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	f1b9 0f01 	cmp.w	r9, #1
 8000fee:	bf0c      	ite	eq
 8000ff0:	695b      	ldreq	r3, [r3, #20]
 8000ff2:	699b      	ldrne	r3, [r3, #24]
 8000ff4:	ea35 0303 	bics.w	r3, r5, r3
 8000ff8:	bf0c      	ite	eq
 8000ffa:	2301      	moveq	r3, #1
 8000ffc:	2300      	movne	r3, #0
 8000ffe:	4543      	cmp	r3, r8
 8001000:	d002      	beq.n	8001008 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001002:	2000      	movs	r0, #0
}
 8001004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001008:	1c7b      	adds	r3, r7, #1
 800100a:	d0ed      	beq.n	8000fe8 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800100c:	f7ff fa9e 	bl	800054c <HAL_GetTick>
 8001010:	1b80      	subs	r0, r0, r6
 8001012:	4287      	cmp	r7, r0
 8001014:	d301      	bcc.n	800101a <I2C_WaitOnFlagUntilTimeout+0x44>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d1e6      	bne.n	8000fe8 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800101a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800101c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800101e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001020:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001024:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001028:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800102a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001034:	2001      	movs	r0, #1
 8001036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800103a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800103a:	b570      	push	{r4, r5, r6, lr}
 800103c:	4604      	mov	r4, r0
 800103e:	460d      	mov	r5, r1
 8001040:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	061b      	lsls	r3, r3, #24
 8001048:	d501      	bpl.n	800104e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800104a:	2000      	movs	r0, #0
 800104c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff ff0d 	bl	8000e6e <I2C_IsAcknowledgeFailed>
 8001054:	b9a8      	cbnz	r0, 8001082 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001056:	1c6a      	adds	r2, r5, #1
 8001058:	d0f3      	beq.n	8001042 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800105a:	f7ff fa77 	bl	800054c <HAL_GetTick>
 800105e:	1b80      	subs	r0, r0, r6
 8001060:	4285      	cmp	r5, r0
 8001062:	d301      	bcc.n	8001068 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001064:	2d00      	cmp	r5, #0
 8001066:	d1ec      	bne.n	8001042 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001068:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800106a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800106c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800106e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001072:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001076:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001078:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800107c:	f042 0220 	orr.w	r2, r2, #32
 8001080:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001082:	2001      	movs	r0, #1
}
 8001084:	bd70      	pop	{r4, r5, r6, pc}
	...

08001088 <HAL_I2C_Init>:
{
 8001088:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800108a:	4604      	mov	r4, r0
 800108c:	b908      	cbnz	r0, 8001092 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800108e:	2001      	movs	r0, #1
 8001090:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001092:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001096:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800109a:	b91b      	cbnz	r3, 80010a4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800109c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80010a0:	f002 fade 	bl	8003660 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80010a4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a6:	2324      	movs	r3, #36	; 0x24
 80010a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80010ac:	6813      	ldr	r3, [r2, #0]
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010b4:	f000 fdde 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010b8:	6865      	ldr	r5, [r4, #4]
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <HAL_I2C_Init+0x138>)
 80010bc:	429d      	cmp	r5, r3
 80010be:	d84d      	bhi.n	800115c <HAL_I2C_Init+0xd4>
 80010c0:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_I2C_Init+0x13c>)
 80010c2:	4298      	cmp	r0, r3
 80010c4:	d9e3      	bls.n	800108e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010c6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80010c8:	493f      	ldr	r1, [pc, #252]	; (80011c8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ca:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80010cc:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010d8:	6a13      	ldr	r3, [r2, #32]
 80010da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010de:	3101      	adds	r1, #1
 80010e0:	4319      	orrs	r1, r3
 80010e2:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010e4:	69d1      	ldr	r1, [r2, #28]
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_I2C_Init+0x138>)
 80010e8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80010ec:	429d      	cmp	r5, r3
 80010ee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80010f2:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80010f6:	d848      	bhi.n	800118a <HAL_I2C_Init+0x102>
 80010f8:	006d      	lsls	r5, r5, #1
 80010fa:	fbb0 f0f5 	udiv	r0, r0, r5
 80010fe:	3001      	adds	r0, #1
 8001100:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001104:	2b04      	cmp	r3, #4
 8001106:	bf38      	it	cc
 8001108:	2304      	movcc	r3, #4
 800110a:	430b      	orrs	r3, r1
 800110c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800110e:	6811      	ldr	r1, [r2, #0]
 8001110:	6a20      	ldr	r0, [r4, #32]
 8001112:	69e3      	ldr	r3, [r4, #28]
 8001114:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001118:	4303      	orrs	r3, r0
 800111a:	430b      	orrs	r3, r1
 800111c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800111e:	6891      	ldr	r1, [r2, #8]
 8001120:	68e0      	ldr	r0, [r4, #12]
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001128:	4303      	orrs	r3, r0
 800112a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800112e:	430b      	orrs	r3, r1
 8001130:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001132:	68d1      	ldr	r1, [r2, #12]
 8001134:	69a0      	ldr	r0, [r4, #24]
 8001136:	6963      	ldr	r3, [r4, #20]
 8001138:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800113c:	4303      	orrs	r3, r0
 800113e:	430b      	orrs	r3, r1
 8001140:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001142:	6813      	ldr	r3, [r2, #0]
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800114c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001150:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001154:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001156:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800115a:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_I2C_Init+0x144>)
 800115e:	4298      	cmp	r0, r3
 8001160:	d995      	bls.n	800108e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001162:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001164:	4e18      	ldr	r6, [pc, #96]	; (80011c8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001166:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001168:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800116c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001170:	4333      	orrs	r3, r6
 8001172:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001174:	6a13      	ldr	r3, [r2, #32]
 8001176:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800117a:	4371      	muls	r1, r6
 800117c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001180:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001184:	fbb1 f1f6 	udiv	r1, r1, r6
 8001188:	e7a9      	b.n	80010de <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800118a:	68a3      	ldr	r3, [r4, #8]
 800118c:	b953      	cbnz	r3, 80011a4 <HAL_I2C_Init+0x11c>
 800118e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001192:	fbb0 f0f3 	udiv	r0, r0, r3
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119c:	b16b      	cbz	r3, 80011ba <HAL_I2C_Init+0x132>
 800119e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a2:	e7b2      	b.n	800110a <HAL_I2C_Init+0x82>
 80011a4:	2319      	movs	r3, #25
 80011a6:	436b      	muls	r3, r5
 80011a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ac:	1c43      	adds	r3, r0, #1
 80011ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b2:	b113      	cbz	r3, 80011ba <HAL_I2C_Init+0x132>
 80011b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b8:	e7a7      	b.n	800110a <HAL_I2C_Init+0x82>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e7a5      	b.n	800110a <HAL_I2C_Init+0x82>
 80011be:	bf00      	nop
 80011c0:	000186a0 	.word	0x000186a0
 80011c4:	001e847f 	.word	0x001e847f
 80011c8:	000f4240 	.word	0x000f4240
 80011cc:	003d08ff 	.word	0x003d08ff

080011d0 <HAL_I2C_Master_Transmit>:
{
 80011d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80011d4:	4604      	mov	r4, r0
 80011d6:	461f      	mov	r7, r3
 80011d8:	460d      	mov	r5, r1
 80011da:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff f9b6 	bl	800054c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80011e4:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80011e6:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011e8:	d004      	beq.n	80011f4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80011ea:	2502      	movs	r5, #2
}
 80011ec:	4628      	mov	r0, r5
 80011ee:	b004      	add	sp, #16
 80011f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011f4:	9000      	str	r0, [sp, #0]
 80011f6:	2319      	movs	r3, #25
 80011f8:	2201      	movs	r2, #1
 80011fa:	4958      	ldr	r1, [pc, #352]	; (800135c <HAL_I2C_Master_Transmit+0x18c>)
 80011fc:	4620      	mov	r0, r4
 80011fe:	f7ff feea 	bl	8000fd6 <I2C_WaitOnFlagUntilTimeout>
 8001202:	2800      	cmp	r0, #0
 8001204:	d1f1      	bne.n	80011ea <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001206:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800120a:	2b01      	cmp	r3, #1
 800120c:	d0ed      	beq.n	80011ea <HAL_I2C_Master_Transmit+0x1a>
 800120e:	2301      	movs	r3, #1
 8001210:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800121a:	bf5e      	ittt	pl
 800121c:	681a      	ldrpl	r2, [r3, #0]
 800121e:	f042 0201 	orrpl.w	r2, r2, #1
 8001222:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800122a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800122c:	2221      	movs	r2, #33	; 0x21
 800122e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001232:	2210      	movs	r2, #16
 8001234:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001238:	2200      	movs	r2, #0
 800123a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800123c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800123e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001240:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001242:	4a47      	ldr	r2, [pc, #284]	; (8001360 <HAL_I2C_Master_Transmit+0x190>)
 8001244:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001246:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001248:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800124c:	2a08      	cmp	r2, #8
 800124e:	d004      	beq.n	800125a <HAL_I2C_Master_Transmit+0x8a>
 8001250:	2a01      	cmp	r2, #1
 8001252:	d002      	beq.n	800125a <HAL_I2C_Master_Transmit+0x8a>
 8001254:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001258:	d104      	bne.n	8001264 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e002      	b.n	800126a <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001264:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001266:	2a12      	cmp	r2, #18
 8001268:	d0f7      	beq.n	800125a <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800126a:	9600      	str	r6, [sp, #0]
 800126c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800126e:	2200      	movs	r2, #0
 8001270:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff feae 	bl	8000fd6 <I2C_WaitOnFlagUntilTimeout>
 800127a:	b108      	cbz	r0, 8001280 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 800127c:	2501      	movs	r5, #1
 800127e:	e7b5      	b.n	80011ec <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001280:	6923      	ldr	r3, [r4, #16]
 8001282:	6822      	ldr	r2, [r4, #0]
 8001284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001288:	d113      	bne.n	80012b2 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800128a:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800128e:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001290:	4633      	mov	r3, r6
 8001292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001294:	4933      	ldr	r1, [pc, #204]	; (8001364 <HAL_I2C_Master_Transmit+0x194>)
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff fe03 	bl	8000ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800129c:	4605      	mov	r5, r0
 800129e:	2800      	cmp	r0, #0
 80012a0:	d1ec      	bne.n	800127c <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	9003      	str	r0, [sp, #12]
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	9203      	str	r2, [sp, #12]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	9303      	str	r3, [sp, #12]
 80012ae:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80012b0:	e044      	b.n	800133c <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80012b2:	11eb      	asrs	r3, r5, #7
 80012b4:	f003 0306 	and.w	r3, r3, #6
 80012b8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80012bc:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80012be:	492a      	ldr	r1, [pc, #168]	; (8001368 <HAL_I2C_Master_Transmit+0x198>)
 80012c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012c2:	4633      	mov	r3, r6
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff fdec 	bl	8000ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d1d6      	bne.n	800127c <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	b2ed      	uxtb	r5, r5
 80012d2:	611d      	str	r5, [r3, #16]
 80012d4:	e7dc      	b.n	8001290 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d6:	4632      	mov	r2, r6
 80012d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80012da:	4620      	mov	r0, r4
 80012dc:	f7ff fead 	bl	800103a <I2C_WaitOnTXEFlagUntilTimeout>
 80012e0:	b140      	cbz	r0, 80012f4 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e4:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012e6:	bf01      	itttt	eq
 80012e8:	6822      	ldreq	r2, [r4, #0]
 80012ea:	6813      	ldreq	r3, [r2, #0]
 80012ec:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80012f0:	6013      	streq	r3, [r2, #0]
 80012f2:	e7c3      	b.n	800127c <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012f6:	6820      	ldr	r0, [r4, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	f812 1b01 	ldrb.w	r1, [r2], #1
 80012fe:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001300:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001302:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001304:	3a01      	subs	r2, #1
 8001306:	b292      	uxth	r2, r2
 8001308:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800130a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800130c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800130e:	1e51      	subs	r1, r2, #1
 8001310:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001312:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001314:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001316:	d50a      	bpl.n	800132e <HAL_I2C_Master_Transmit+0x15e>
 8001318:	b149      	cbz	r1, 800132e <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800131a:	7859      	ldrb	r1, [r3, #1]
 800131c:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 800131e:	3302      	adds	r3, #2
 8001320:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001322:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001324:	3b01      	subs	r3, #1
 8001326:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001328:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800132a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800132c:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132e:	4632      	mov	r2, r6
 8001330:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff fdfa 	bl	8000f2c <I2C_WaitOnBTFFlagUntilTimeout>
 8001338:	2800      	cmp	r0, #0
 800133a:	d1d2      	bne.n	80012e2 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 800133c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1c9      	bne.n	80012d6 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001342:	6821      	ldr	r1, [r4, #0]
 8001344:	680a      	ldr	r2, [r1, #0]
 8001346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800134a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800134c:	2220      	movs	r2, #32
 800134e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001352:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001356:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800135a:	e747      	b.n	80011ec <HAL_I2C_Master_Transmit+0x1c>
 800135c:	00100002 	.word	0x00100002
 8001360:	ffff0000 	.word	0xffff0000
 8001364:	00010002 	.word	0x00010002
 8001368:	00010008 	.word	0x00010008

0800136c <HAL_I2C_Master_Receive>:
{
 800136c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001370:	4604      	mov	r4, r0
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	4698      	mov	r8, r3
 8001376:	460f      	mov	r7, r1
 8001378:	4691      	mov	r9, r2
 800137a:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff f8e6 	bl	800054c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001380:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001384:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001386:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001388:	d004      	beq.n	8001394 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800138a:	2702      	movs	r7, #2
}
 800138c:	4638      	mov	r0, r7
 800138e:	b009      	add	sp, #36	; 0x24
 8001390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001394:	9000      	str	r0, [sp, #0]
 8001396:	2319      	movs	r3, #25
 8001398:	2201      	movs	r2, #1
 800139a:	49a6      	ldr	r1, [pc, #664]	; (8001634 <HAL_I2C_Master_Receive+0x2c8>)
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fe1a 	bl	8000fd6 <I2C_WaitOnFlagUntilTimeout>
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d1f1      	bne.n	800138a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80013a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d0ed      	beq.n	800138a <HAL_I2C_Master_Receive+0x1e>
 80013ae:	2301      	movs	r3, #1
 80013b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80013ba:	bf5e      	ittt	pl
 80013bc:	681a      	ldrpl	r2, [r3, #0]
 80013be:	f042 0201 	orrpl.w	r2, r2, #1
 80013c2:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ca:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80013cc:	2222      	movs	r2, #34	; 0x22
 80013ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013d2:	2210      	movs	r2, #16
 80013d4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013d8:	2200      	movs	r2, #0
 80013da:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80013dc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80013e2:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013e4:	4a94      	ldr	r2, [pc, #592]	; (8001638 <HAL_I2C_Master_Receive+0x2cc>)
 80013e6:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80013e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ea:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 80013ec:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80013f4:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f6:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80013f8:	d004      	beq.n	8001404 <HAL_I2C_Master_Receive+0x98>
 80013fa:	2a01      	cmp	r2, #1
 80013fc:	d002      	beq.n	8001404 <HAL_I2C_Master_Receive+0x98>
 80013fe:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001402:	d104      	bne.n	800140e <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e002      	b.n	8001414 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800140e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001410:	2a11      	cmp	r2, #17
 8001412:	d0f7      	beq.n	8001404 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001414:	9500      	str	r5, [sp, #0]
 8001416:	4633      	mov	r3, r6
 8001418:	2200      	movs	r2, #0
 800141a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff fdd9 	bl	8000fd6 <I2C_WaitOnFlagUntilTimeout>
 8001424:	b108      	cbz	r0, 800142a <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8001426:	2701      	movs	r7, #1
 8001428:	e7b0      	b.n	800138c <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800142a:	6923      	ldr	r3, [r4, #16]
 800142c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	d140      	bne.n	80014b6 <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001434:	f047 0701 	orr.w	r7, r7, #1
 8001438:	b2ff      	uxtb	r7, r7
 800143a:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800143c:	462b      	mov	r3, r5
 800143e:	4632      	mov	r2, r6
 8001440:	497e      	ldr	r1, [pc, #504]	; (800163c <HAL_I2C_Master_Receive+0x2d0>)
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff fd2d 	bl	8000ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001448:	4607      	mov	r7, r0
 800144a:	2800      	cmp	r0, #0
 800144c:	d1eb      	bne.n	8001426 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 800144e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	2a00      	cmp	r2, #0
 8001454:	d063      	beq.n	800151e <HAL_I2C_Master_Receive+0x1b2>
    else if (hi2c->XferSize == 1U)
 8001456:	2a01      	cmp	r2, #1
 8001458:	d174      	bne.n	8001544 <HAL_I2C_Master_Receive+0x1d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001460:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001462:	9704      	str	r7, [sp, #16]
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	9204      	str	r2, [sp, #16]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	9204      	str	r2, [sp, #16]
 800146c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001474:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001476:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8001644 <HAL_I2C_Master_Receive+0x2d8>
    while (hi2c->XferSize > 0U)
 800147a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800147c:	2b00      	cmp	r3, #0
 800147e:	d058      	beq.n	8001532 <HAL_I2C_Master_Receive+0x1c6>
      if (hi2c->XferSize <= 3U)
 8001480:	2b03      	cmp	r3, #3
 8001482:	f200 80ba 	bhi.w	80015fa <HAL_I2C_Master_Receive+0x28e>
        if (hi2c->XferSize == 1U)
 8001486:	2b01      	cmp	r3, #1
 8001488:	d177      	bne.n	800157a <HAL_I2C_Master_Receive+0x20e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800148a:	462a      	mov	r2, r5
 800148c:	4631      	mov	r1, r6
 800148e:	4620      	mov	r0, r4
 8001490:	f7ff fd72 	bl	8000f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001494:	2800      	cmp	r0, #0
 8001496:	d1c6      	bne.n	8001426 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001498:	6822      	ldr	r2, [r4, #0]
 800149a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800149c:	6912      	ldr	r2, [r2, #16]
 800149e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80014a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014a2:	3301      	adds	r3, #1
 80014a4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80014a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80014a8:	3b01      	subs	r3, #1
 80014aa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80014ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80014b4:	e7e1      	b.n	800147a <HAL_I2C_Master_Receive+0x10e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014b6:	ea4f 18e7 	mov.w	r8, r7, asr #7
 80014ba:	f008 0806 	and.w	r8, r8, #6
 80014be:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80014c2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014c4:	495e      	ldr	r1, [pc, #376]	; (8001640 <HAL_I2C_Master_Receive+0x2d4>)
 80014c6:	462b      	mov	r3, r5
 80014c8:	4632      	mov	r2, r6
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff fce9 	bl	8000ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d1a8      	bne.n	8001426 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014d4:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014d6:	4959      	ldr	r1, [pc, #356]	; (800163c <HAL_I2C_Master_Receive+0x2d0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014d8:	b2ff      	uxtb	r7, r7
 80014da:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014dc:	4632      	mov	r2, r6
 80014de:	462b      	mov	r3, r5
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff fcde 	bl	8000ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014e6:	4602      	mov	r2, r0
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d19c      	bne.n	8001426 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	9007      	str	r0, [sp, #28]
 80014f0:	6959      	ldr	r1, [r3, #20]
 80014f2:	9107      	str	r1, [sp, #28]
 80014f4:	6999      	ldr	r1, [r3, #24]
 80014f6:	9107      	str	r1, [sp, #28]
 80014f8:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014fa:	6819      	ldr	r1, [r3, #0]
 80014fc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001500:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001502:	4620      	mov	r0, r4
 8001504:	9500      	str	r5, [sp, #0]
 8001506:	4633      	mov	r3, r6
 8001508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800150c:	f7ff fd63 	bl	8000fd6 <I2C_WaitOnFlagUntilTimeout>
 8001510:	2800      	cmp	r0, #0
 8001512:	d188      	bne.n	8001426 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800151a:	6113      	str	r3, [r2, #16]
 800151c:	e78e      	b.n	800143c <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151e:	9703      	str	r7, [sp, #12]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	9203      	str	r2, [sp, #12]
 8001524:	699a      	ldr	r2, [r3, #24]
 8001526:	9203      	str	r2, [sp, #12]
 8001528:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001530:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001532:	2320      	movs	r3, #32
 8001534:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800153e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001542:	e723      	b.n	800138c <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8001544:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001546:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001548:	d10d      	bne.n	8001566 <HAL_I2C_Master_Receive+0x1fa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800154a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001556:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001558:	9705      	str	r7, [sp, #20]
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	9205      	str	r2, [sp, #20]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	9305      	str	r3, [sp, #20]
 8001562:	9b05      	ldr	r3, [sp, #20]
 8001564:	e787      	b.n	8001476 <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001566:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800156a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800156c:	9706      	str	r7, [sp, #24]
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	9206      	str	r2, [sp, #24]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	9306      	str	r3, [sp, #24]
 8001576:	9b06      	ldr	r3, [sp, #24]
 8001578:	e77d      	b.n	8001476 <HAL_I2C_Master_Receive+0x10a>
        else if (hi2c->XferSize == 2U)
 800157a:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800157c:	9500      	str	r5, [sp, #0]
 800157e:	4633      	mov	r3, r6
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4641      	mov	r1, r8
 8001586:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001588:	d11a      	bne.n	80015c0 <HAL_I2C_Master_Receive+0x254>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800158a:	f7ff fd24 	bl	8000fd6 <I2C_WaitOnFlagUntilTimeout>
 800158e:	2800      	cmp	r0, #0
 8001590:	f47f af49 	bne.w	8001426 <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800159c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800159e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80015a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015a6:	1c53      	adds	r3, r2, #1
 80015a8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80015aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015ac:	3b01      	subs	r3, #1
 80015ae:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015b8:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	7053      	strb	r3, [r2, #1]
 80015be:	e76f      	b.n	80014a0 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015c0:	f7ff fd09 	bl	8000fd6 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	4602      	mov	r2, r0
 80015c6:	2800      	cmp	r0, #0
 80015c8:	f47f af2d 	bne.w	8001426 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80015d4:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 80015dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015de:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 80015e0:	3301      	adds	r3, #1
 80015e2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80015e4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015e6:	3b01      	subs	r3, #1
 80015e8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015f2:	4641      	mov	r1, r8
 80015f4:	4633      	mov	r3, r6
 80015f6:	4620      	mov	r0, r4
 80015f8:	e7c7      	b.n	800158a <HAL_I2C_Master_Receive+0x21e>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015fa:	462a      	mov	r2, r5
 80015fc:	4631      	mov	r1, r6
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff fcba 	bl	8000f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001604:	2800      	cmp	r0, #0
 8001606:	f47f af0e 	bne.w	8001426 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800160e:	6912      	ldr	r2, [r2, #16]
 8001610:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001612:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001614:	1c53      	adds	r3, r2, #1
 8001616:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001618:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800161a:	3b01      	subs	r3, #1
 800161c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800161e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001620:	3b01      	subs	r3, #1
 8001622:	b29b      	uxth	r3, r3
 8001624:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	6959      	ldr	r1, [r3, #20]
 800162a:	0749      	lsls	r1, r1, #29
 800162c:	f57f af25 	bpl.w	800147a <HAL_I2C_Master_Receive+0x10e>
 8001630:	e7c3      	b.n	80015ba <HAL_I2C_Master_Receive+0x24e>
 8001632:	bf00      	nop
 8001634:	00100002 	.word	0x00100002
 8001638:	ffff0000 	.word	0xffff0000
 800163c:	00010002 	.word	0x00010002
 8001640:	00010008 	.word	0x00010008
 8001644:	00010004 	.word	0x00010004

08001648 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001648:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	2a20      	cmp	r2, #32
{
 8001650:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001652:	d116      	bne.n	8001682 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001654:	2324      	movs	r3, #36	; 0x24
 8001656:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800165a:	6803      	ldr	r3, [r0, #0]
 800165c:	681c      	ldr	r4, [r3, #0]
 800165e:	f024 0401 	bic.w	r4, r4, #1
 8001662:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001664:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001666:	f024 0410 	bic.w	r4, r4, #16
 800166a:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800166c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800166e:	4321      	orrs	r1, r4
 8001670:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	f041 0101 	orr.w	r1, r1, #1
 8001678:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800167a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 800167e:	2000      	movs	r0, #0
 8001680:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001682:	2002      	movs	r0, #2
  }
}
 8001684:	bd10      	pop	{r4, pc}

08001686 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001686:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001688:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800168c:	b2e4      	uxtb	r4, r4
 800168e:	2c20      	cmp	r4, #32
 8001690:	d116      	bne.n	80016c0 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001692:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001694:	2324      	movs	r3, #36	; 0x24
 8001696:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800169a:	6815      	ldr	r5, [r2, #0]
 800169c:	f025 0501 	bic.w	r5, r5, #1
 80016a0:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80016a2:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80016a4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80016a8:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80016aa:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80016b0:	6813      	ldr	r3, [r2, #0]
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b8:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 80016bc:	2000      	movs	r0, #0
 80016be:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 80016c0:	2002      	movs	r0, #2
  }
}
 80016c2:	bd30      	pop	{r4, r5, pc}

080016c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016c6:	4604      	mov	r4, r0
{
 80016c8:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80016ca:	b360      	cbz	r0, 8001726 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016cc:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 80016d0:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016d6:	b91b      	cbnz	r3, 80016e0 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016d8:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016dc:	f002 fa76 	bl	8003bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016e6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016e8:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016ea:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 80016ee:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 80016f2:	bf08      	it	eq
 80016f4:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 80016f6:	f000 fdd5 	bl	80022a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	466e      	mov	r6, sp
 80016fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001702:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001704:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001708:	e886 0003 	stmia.w	r6, {r0, r1}
 800170c:	4625      	mov	r5, r4
 800170e:	1d27      	adds	r7, r4, #4
 8001710:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001714:	f855 0b10 	ldr.w	r0, [r5], #16
 8001718:	f000 fd84 	bl	8002224 <USB_CoreInit>
 800171c:	4606      	mov	r6, r0
 800171e:	b120      	cbz	r0, 800172a <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001720:	2302      	movs	r3, #2
 8001722:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001726:	2501      	movs	r5, #1
 8001728:	e050      	b.n	80017cc <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800172a:	4601      	mov	r1, r0
 800172c:	6820      	ldr	r0, [r4, #0]
 800172e:	f000 fdbf 	bl	80022b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001732:	4630      	mov	r0, r6
 8001734:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001738:	261c      	movs	r6, #28
 800173a:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800173e:	4601      	mov	r1, r0
 8001740:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001742:	4596      	cmp	lr, r2
 8001744:	f100 0001 	add.w	r0, r0, #1
 8001748:	d81c      	bhi.n	8001784 <HAL_PCD_Init+0xc0>
 800174a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800174c:	261c      	movs	r6, #28
 800174e:	4619      	mov	r1, r3
 8001750:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001752:	4586      	cmp	lr, r0
 8001754:	f103 0301 	add.w	r3, r3, #1
 8001758:	d822      	bhi.n	80017a0 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175c:	466e      	mov	r6, sp
 800175e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001762:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001764:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001768:	e886 0003 	stmia.w	r6, {r0, r1}
 800176c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001770:	6820      	ldr	r0, [r4, #0]
 8001772:	f000 fddf 	bl	8002334 <USB_DevInit>
 8001776:	2301      	movs	r3, #1
 8001778:	4605      	mov	r5, r0
 800177a:	b300      	cbz	r0, 80017be <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800177c:	2202      	movs	r2, #2
 800177e:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8001782:	e7d0      	b.n	8001726 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8001784:	fb06 4302 	mla	r3, r6, r2, r4
 8001788:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001790:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001794:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001798:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800179a:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 800179c:	6519      	str	r1, [r3, #80]	; 0x50
 800179e:	e7cf      	b.n	8001740 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 80017a0:	fb06 4200 	mla	r2, r6, r0, r4
 80017a4:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80017a8:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ac:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017b0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017b4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017b8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 80017bc:	e7c8      	b.n	8001750 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80017be:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017c2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017c6:	6820      	ldr	r0, [r4, #0]
 80017c8:	f000 fe78 	bl	80024bc <USB_DevDisconnect>

  return HAL_OK;
}
 80017cc:	4628      	mov	r0, r5
 80017ce:	b00b      	add	sp, #44	; 0x2c
 80017d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d8:	4604      	mov	r4, r0
 80017da:	b918      	cbnz	r0, 80017e4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80017dc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80017de:	b002      	add	sp, #8
 80017e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e4:	6803      	ldr	r3, [r0, #0]
 80017e6:	07dd      	lsls	r5, r3, #31
 80017e8:	d410      	bmi.n	800180c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	0798      	lsls	r0, r3, #30
 80017ee:	d458      	bmi.n	80018a2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	071a      	lsls	r2, r3, #28
 80017f4:	f100 809a 	bmi.w	800192c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	075b      	lsls	r3, r3, #29
 80017fc:	f100 80b8 	bmi.w	8001970 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001800:	69a2      	ldr	r2, [r4, #24]
 8001802:	2a00      	cmp	r2, #0
 8001804:	f040 8119 	bne.w	8001a3a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001808:	2000      	movs	r0, #0
 800180a:	e7e8      	b.n	80017de <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800180c:	4ba6      	ldr	r3, [pc, #664]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	f002 020c 	and.w	r2, r2, #12
 8001814:	2a04      	cmp	r2, #4
 8001816:	d007      	beq.n	8001828 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800181e:	2a08      	cmp	r2, #8
 8001820:	d10a      	bne.n	8001838 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	0259      	lsls	r1, r3, #9
 8001826:	d507      	bpl.n	8001838 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	4b9f      	ldr	r3, [pc, #636]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	039a      	lsls	r2, r3, #14
 800182e:	d5dc      	bpl.n	80017ea <HAL_RCC_OscConfig+0x16>
 8001830:	6863      	ldr	r3, [r4, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1d9      	bne.n	80017ea <HAL_RCC_OscConfig+0x16>
 8001836:	e7d1      	b.n	80017dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001838:	6863      	ldr	r3, [r4, #4]
 800183a:	4d9b      	ldr	r5, [pc, #620]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d111      	bne.n	8001866 <HAL_RCC_OscConfig+0x92>
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800184a:	f7fe fe7f 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4d96      	ldr	r5, [pc, #600]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001850:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	682b      	ldr	r3, [r5, #0]
 8001854:	039b      	lsls	r3, r3, #14
 8001856:	d4c8      	bmi.n	80017ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001858:	f7fe fe78 	bl	800054c <HAL_GetTick>
 800185c:	1b80      	subs	r0, r0, r6
 800185e:	2864      	cmp	r0, #100	; 0x64
 8001860:	d9f7      	bls.n	8001852 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001862:	2003      	movs	r0, #3
 8001864:	e7bb      	b.n	80017de <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186a:	d104      	bne.n	8001876 <HAL_RCC_OscConfig+0xa2>
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001872:	602b      	str	r3, [r5, #0]
 8001874:	e7e5      	b.n	8001842 <HAL_RCC_OscConfig+0x6e>
 8001876:	682a      	ldr	r2, [r5, #0]
 8001878:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800187c:	602a      	str	r2, [r5, #0]
 800187e:	682a      	ldr	r2, [r5, #0]
 8001880:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001884:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1df      	bne.n	800184a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800188a:	f7fe fe5f 	bl	800054c <HAL_GetTick>
 800188e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	039f      	lsls	r7, r3, #14
 8001894:	d5a9      	bpl.n	80017ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001896:	f7fe fe59 	bl	800054c <HAL_GetTick>
 800189a:	1b80      	subs	r0, r0, r6
 800189c:	2864      	cmp	r0, #100	; 0x64
 800189e:	d9f7      	bls.n	8001890 <HAL_RCC_OscConfig+0xbc>
 80018a0:	e7df      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018a2:	4b81      	ldr	r3, [pc, #516]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	f012 0f0c 	tst.w	r2, #12
 80018aa:	d007      	beq.n	80018bc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b2:	2a08      	cmp	r2, #8
 80018b4:	d111      	bne.n	80018da <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	025e      	lsls	r6, r3, #9
 80018ba:	d40e      	bmi.n	80018da <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018bc:	4b7a      	ldr	r3, [pc, #488]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	0795      	lsls	r5, r2, #30
 80018c2:	d502      	bpl.n	80018ca <HAL_RCC_OscConfig+0xf6>
 80018c4:	68e2      	ldr	r2, [r4, #12]
 80018c6:	2a01      	cmp	r2, #1
 80018c8:	d188      	bne.n	80017dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	6921      	ldr	r1, [r4, #16]
 80018ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018d2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80018d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d8:	e78a      	b.n	80017f0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018da:	68e2      	ldr	r2, [r4, #12]
 80018dc:	4b73      	ldr	r3, [pc, #460]	; (8001aac <HAL_RCC_OscConfig+0x2d8>)
 80018de:	b1b2      	cbz	r2, 800190e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018e4:	f7fe fe32 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4d6f      	ldr	r5, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80018ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	682b      	ldr	r3, [r5, #0]
 80018ee:	0798      	lsls	r0, r3, #30
 80018f0:	d507      	bpl.n	8001902 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	682b      	ldr	r3, [r5, #0]
 80018f4:	6922      	ldr	r2, [r4, #16]
 80018f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018fe:	602b      	str	r3, [r5, #0]
 8001900:	e776      	b.n	80017f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001902:	f7fe fe23 	bl	800054c <HAL_GetTick>
 8001906:	1b80      	subs	r0, r0, r6
 8001908:	2802      	cmp	r0, #2
 800190a:	d9ef      	bls.n	80018ec <HAL_RCC_OscConfig+0x118>
 800190c:	e7a9      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800190e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001910:	f7fe fe1c 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001914:	4d64      	ldr	r5, [pc, #400]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001916:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	0799      	lsls	r1, r3, #30
 800191c:	f57f af68 	bpl.w	80017f0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001920:	f7fe fe14 	bl	800054c <HAL_GetTick>
 8001924:	1b80      	subs	r0, r0, r6
 8001926:	2802      	cmp	r0, #2
 8001928:	d9f6      	bls.n	8001918 <HAL_RCC_OscConfig+0x144>
 800192a:	e79a      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192c:	6962      	ldr	r2, [r4, #20]
 800192e:	4b60      	ldr	r3, [pc, #384]	; (8001ab0 <HAL_RCC_OscConfig+0x2dc>)
 8001930:	b17a      	cbz	r2, 8001952 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001936:	f7fe fe09 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	4d5b      	ldr	r5, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800193c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001940:	079f      	lsls	r7, r3, #30
 8001942:	f53f af59 	bmi.w	80017f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001946:	f7fe fe01 	bl	800054c <HAL_GetTick>
 800194a:	1b80      	subs	r0, r0, r6
 800194c:	2802      	cmp	r0, #2
 800194e:	d9f6      	bls.n	800193e <HAL_RCC_OscConfig+0x16a>
 8001950:	e787      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001952:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001954:	f7fe fdfa 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4d53      	ldr	r5, [pc, #332]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800195a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800195e:	0798      	lsls	r0, r3, #30
 8001960:	f57f af4a 	bpl.w	80017f8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001964:	f7fe fdf2 	bl	800054c <HAL_GetTick>
 8001968:	1b80      	subs	r0, r0, r6
 800196a:	2802      	cmp	r0, #2
 800196c:	d9f6      	bls.n	800195c <HAL_RCC_OscConfig+0x188>
 800196e:	e778      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 8001972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001974:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001978:	d128      	bne.n	80019cc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	9201      	str	r2, [sp, #4]
 800197c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800198e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	4d48      	ldr	r5, [pc, #288]	; (8001ab4 <HAL_RCC_OscConfig+0x2e0>)
 8001992:	682b      	ldr	r3, [r5, #0]
 8001994:	05d9      	lsls	r1, r3, #23
 8001996:	d51b      	bpl.n	80019d0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	68a3      	ldr	r3, [r4, #8]
 800199a:	4d43      	ldr	r5, [pc, #268]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 800199c:	2b01      	cmp	r3, #1
 800199e:	d127      	bne.n	80019f0 <HAL_RCC_OscConfig+0x21c>
 80019a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80019a8:	f7fe fdd0 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	4d3e      	ldr	r5, [pc, #248]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80019ae:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019b6:	079b      	lsls	r3, r3, #30
 80019b8:	d539      	bpl.n	8001a2e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80019ba:	2e00      	cmp	r6, #0
 80019bc:	f43f af20 	beq.w	8001800 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c0:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 80019c2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	e719      	b.n	8001800 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80019cc:	2600      	movs	r6, #0
 80019ce:	e7df      	b.n	8001990 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d0:	682b      	ldr	r3, [r5, #0]
 80019d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019d8:	f7fe fdb8 	bl	800054c <HAL_GetTick>
 80019dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	05da      	lsls	r2, r3, #23
 80019e2:	d4d9      	bmi.n	8001998 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e4:	f7fe fdb2 	bl	800054c <HAL_GetTick>
 80019e8:	1bc0      	subs	r0, r0, r7
 80019ea:	2802      	cmp	r0, #2
 80019ec:	d9f7      	bls.n	80019de <HAL_RCC_OscConfig+0x20a>
 80019ee:	e738      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d104      	bne.n	80019fe <HAL_RCC_OscConfig+0x22a>
 80019f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	672b      	str	r3, [r5, #112]	; 0x70
 80019fc:	e7d0      	b.n	80019a0 <HAL_RCC_OscConfig+0x1cc>
 80019fe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	672a      	str	r2, [r5, #112]	; 0x70
 8001a06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a08:	f022 0204 	bic.w	r2, r2, #4
 8001a0c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ca      	bne.n	80019a8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001a12:	f7fe fd9b 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a1a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a1e:	0798      	lsls	r0, r3, #30
 8001a20:	d5cb      	bpl.n	80019ba <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7fe fd93 	bl	800054c <HAL_GetTick>
 8001a26:	1bc0      	subs	r0, r0, r7
 8001a28:	4540      	cmp	r0, r8
 8001a2a:	d9f7      	bls.n	8001a1c <HAL_RCC_OscConfig+0x248>
 8001a2c:	e719      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7fe fd8d 	bl	800054c <HAL_GetTick>
 8001a32:	1bc0      	subs	r0, r0, r7
 8001a34:	4540      	cmp	r0, r8
 8001a36:	d9bd      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1e0>
 8001a38:	e713      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3a:	4d1b      	ldr	r5, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
 8001a3c:	68ab      	ldr	r3, [r5, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	f43f aeca 	beq.w	80017dc <HAL_RCC_OscConfig+0x8>
 8001a48:	4e1b      	ldr	r6, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x2e4>)
 8001a4a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a50:	d134      	bne.n	8001abc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001a52:	f7fe fd7b 	bl	800054c <HAL_GetTick>
 8001a56:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	0199      	lsls	r1, r3, #6
 8001a5c:	d41e      	bmi.n	8001a9c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5e:	6a22      	ldr	r2, [r4, #32]
 8001a60:	69e3      	ldr	r3, [r4, #28]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a66:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4c0d      	ldr	r4, [pc, #52]	; (8001aa8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a74:	0852      	lsrs	r2, r2, #1
 8001a76:	3a01      	subs	r2, #1
 8001a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a7c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a7e:	2301      	movs	r3, #1
 8001a80:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a82:	f7fe fd63 	bl	800054c <HAL_GetTick>
 8001a86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	019a      	lsls	r2, r3, #6
 8001a8c:	f53f aebc 	bmi.w	8001808 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7fe fd5c 	bl	800054c <HAL_GetTick>
 8001a94:	1b40      	subs	r0, r0, r5
 8001a96:	2802      	cmp	r0, #2
 8001a98:	d9f6      	bls.n	8001a88 <HAL_RCC_OscConfig+0x2b4>
 8001a9a:	e6e2      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7fe fd56 	bl	800054c <HAL_GetTick>
 8001aa0:	1bc0      	subs	r0, r0, r7
 8001aa2:	2802      	cmp	r0, #2
 8001aa4:	d9d8      	bls.n	8001a58 <HAL_RCC_OscConfig+0x284>
 8001aa6:	e6dc      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470000 	.word	0x42470000
 8001ab0:	42470e80 	.word	0x42470e80
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001abc:	f7fe fd46 	bl	800054c <HAL_GetTick>
 8001ac0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac2:	682b      	ldr	r3, [r5, #0]
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	f57f ae9f 	bpl.w	8001808 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7fe fd3f 	bl	800054c <HAL_GetTick>
 8001ace:	1b00      	subs	r0, r0, r4
 8001ad0:	2802      	cmp	r0, #2
 8001ad2:	d9f6      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x2ee>
 8001ad4:	e6c5      	b.n	8001862 <HAL_RCC_OscConfig+0x8e>
 8001ad6:	bf00      	nop

08001ad8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad8:	4913      	ldr	r1, [pc, #76]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001ada:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001adc:	688b      	ldr	r3, [r1, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x16>
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aea:	4810      	ldr	r0, [pc, #64]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001aec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001aee:	4810      	ldr	r0, [pc, #64]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x58>)
 8001af0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afc:	bf14      	ite	ne
 8001afe:	480c      	ldrne	r0, [pc, #48]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b00:	480a      	ldreq	r0, [pc, #40]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b06:	bf18      	it	ne
 8001b08:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	fba1 0100 	umull	r0, r1, r1, r0
 8001b12:	f7fe fb6d 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b26:	bd08      	pop	{r3, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	007a1200 	.word	0x007a1200

08001b34 <HAL_RCC_ClockConfig>:
{
 8001b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b38:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	b910      	cbnz	r0, 8001b44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b3e:	2001      	movs	r0, #1
 8001b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_RCC_ClockConfig+0x124>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f002 020f 	and.w	r2, r2, #15
 8001b4c:	428a      	cmp	r2, r1
 8001b4e:	d328      	bcc.n	8001ba2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	6821      	ldr	r1, [r4, #0]
 8001b52:	078f      	lsls	r7, r1, #30
 8001b54:	d42d      	bmi.n	8001bb2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	07c8      	lsls	r0, r1, #31
 8001b58:	d440      	bmi.n	8001bdc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <HAL_RCC_ClockConfig+0x124>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f002 020f 	and.w	r2, r2, #15
 8001b62:	4295      	cmp	r5, r2
 8001b64:	d366      	bcc.n	8001c34 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	0751      	lsls	r1, r2, #29
 8001b6a:	d46c      	bmi.n	8001c46 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6c:	0713      	lsls	r3, r2, #28
 8001b6e:	d507      	bpl.n	8001b80 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b70:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_RCC_ClockConfig+0x128>)
 8001b72:	6921      	ldr	r1, [r4, #16]
 8001b74:	6893      	ldr	r3, [r2, #8]
 8001b76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b80:	f7ff ffaa 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_RCC_ClockConfig+0x128>)
 8001b86:	4a36      	ldr	r2, [pc, #216]	; (8001c60 <HAL_RCC_ClockConfig+0x12c>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	40d8      	lsrs	r0, r3
 8001b92:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_RCC_ClockConfig+0x130>)
 8001b94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f001 fe4a 	bl	8003830 <HAL_InitTick>
  return HAL_OK;
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	4299      	cmp	r1, r3
 8001bae:	d1c6      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xa>
 8001bb0:	e7ce      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1c>
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	bf1e      	ittt	ne
 8001bba:	689a      	ldrne	r2, [r3, #8]
 8001bbc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001bc0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc4:	bf42      	ittt	mi
 8001bc6:	689a      	ldrmi	r2, [r3, #8]
 8001bc8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001bcc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	68a0      	ldr	r0, [r4, #8]
 8001bd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bd6:	4302      	orrs	r2, r0
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	e7bc      	b.n	8001b56 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bdc:	6862      	ldr	r2, [r4, #4]
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_RCC_ClockConfig+0x128>)
 8001be0:	2a01      	cmp	r2, #1
 8001be2:	d11d      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bea:	d0a8      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bec:	4e1b      	ldr	r6, [pc, #108]	; (8001c5c <HAL_RCC_ClockConfig+0x128>)
 8001bee:	68b3      	ldr	r3, [r6, #8]
 8001bf0:	f023 0303 	bic.w	r3, r3, #3
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001bf8:	f7fe fca8 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001c00:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	68b3      	ldr	r3, [r6, #8]
 8001c04:	6862      	ldr	r2, [r4, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c0e:	d0a4      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7fe fc9c 	bl	800054c <HAL_GetTick>
 8001c14:	1bc0      	subs	r0, r0, r7
 8001c16:	4540      	cmp	r0, r8
 8001c18:	d9f3      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001c1a:	2003      	movs	r0, #3
}
 8001c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c20:	1e91      	subs	r1, r2, #2
 8001c22:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c24:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c26:	d802      	bhi.n	8001c2e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c2c:	e7dd      	b.n	8001bea <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	f013 0f02 	tst.w	r3, #2
 8001c32:	e7da      	b.n	8001bea <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c34:	b2ea      	uxtb	r2, r5
 8001c36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	429d      	cmp	r5, r3
 8001c40:	f47f af7d 	bne.w	8001b3e <HAL_RCC_ClockConfig+0xa>
 8001c44:	e78f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c46:	4905      	ldr	r1, [pc, #20]	; (8001c5c <HAL_RCC_ClockConfig+0x128>)
 8001c48:	68e0      	ldr	r0, [r4, #12]
 8001c4a:	688b      	ldr	r3, [r1, #8]
 8001c4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c50:	4303      	orrs	r3, r0
 8001c52:	608b      	str	r3, [r1, #8]
 8001c54:	e78a      	b.n	8001b6c <HAL_RCC_ClockConfig+0x38>
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08003d5c 	.word	0x08003d5c
 8001c64:	20000008 	.word	0x20000008

08001c68 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001c68:	4b01      	ldr	r3, [pc, #4]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x8>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008

08001c74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c82:	6810      	ldr	r0, [r2, #0]
}
 8001c84:	40d8      	lsrs	r0, r3
 8001c86:	4770      	bx	lr
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	08003d6c 	.word	0x08003d6c
 8001c90:	20000008 	.word	0x20000008

08001c94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ca2:	6810      	ldr	r0, [r2, #0]
}
 8001ca4:	40d8      	lsrs	r0, r3
 8001ca6:	4770      	bx	lr
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	08003d6c 	.word	0x08003d6c
 8001cb0:	20000008 	.word	0x20000008

08001cb4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_GetClockConfig+0x34>)
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001cc8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001cd0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001cda:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_RCC_GetClockConfig+0x38>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	600b      	str	r3, [r1, #0]
 8001ce6:	4770      	bx	lr
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_TIM_Base_MspInit>:
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf2:	6803      	ldr	r3, [r0, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d02:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001d04:	bf1e      	ittt	ne
 8001d06:	681a      	ldrne	r2, [r3, #0]
 8001d08:	f042 0201 	orrne.w	r2, r2, #1
 8001d0c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001d0e:	2000      	movs	r0, #0
 8001d10:	4770      	bx	lr

08001d12 <HAL_TIM_OC_DelayElapsedCallback>:
 8001d12:	4770      	bx	lr

08001d14 <HAL_TIM_IC_CaptureCallback>:
 8001d14:	4770      	bx	lr

08001d16 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001d16:	4770      	bx	lr

08001d18 <HAL_TIM_TriggerCallback>:
 8001d18:	4770      	bx	lr

08001d1a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d1a:	6803      	ldr	r3, [r0, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	0791      	lsls	r1, r2, #30
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d24:	d50e      	bpl.n	8001d44 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	0792      	lsls	r2, r2, #30
 8001d2a:	d50b      	bpl.n	8001d44 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d2c:	f06f 0202 	mvn.w	r2, #2
 8001d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d32:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d34:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d36:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d38:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d3a:	d077      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3c:	f7ff ffea 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d40:	2300      	movs	r3, #0
 8001d42:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	0750      	lsls	r0, r2, #29
 8001d4a:	d510      	bpl.n	8001d6e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	0751      	lsls	r1, r2, #29
 8001d50:	d50d      	bpl.n	8001d6e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d52:	f06f 0204 	mvn.w	r2, #4
 8001d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d58:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d60:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d64:	d068      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	f7ff ffd5 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	0712      	lsls	r2, r2, #28
 8001d74:	d50f      	bpl.n	8001d96 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	0710      	lsls	r0, r2, #28
 8001d7a:	d50c      	bpl.n	8001d96 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d7c:	f06f 0208 	mvn.w	r2, #8
 8001d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d82:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d84:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d86:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d88:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d8c:	d05a      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	f7ff ffc1 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	2300      	movs	r3, #0
 8001d94:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	06d2      	lsls	r2, r2, #27
 8001d9c:	d510      	bpl.n	8001dc0 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	06d0      	lsls	r0, r2, #27
 8001da2:	d50d      	bpl.n	8001dc0 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001da4:	f06f 0210 	mvn.w	r2, #16
 8001da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001daa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dac:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dae:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001db2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db6:	d04b      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001db8:	f7ff ffac 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	07d1      	lsls	r1, r2, #31
 8001dc6:	d508      	bpl.n	8001dda <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	07d2      	lsls	r2, r2, #31
 8001dcc:	d505      	bpl.n	8001dda <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dce:	f06f 0201 	mvn.w	r2, #1
 8001dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f001 fcf9 	bl	80037cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	0610      	lsls	r0, r2, #24
 8001de0:	d508      	bpl.n	8001df4 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	0611      	lsls	r1, r2, #24
 8001de6:	d505      	bpl.n	8001df4 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dee:	4620      	mov	r0, r4
 8001df0:	f000 f8b7 	bl	8001f62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	0652      	lsls	r2, r2, #25
 8001dfa:	d508      	bpl.n	8001e0e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	0650      	lsls	r0, r2, #25
 8001e00:	d505      	bpl.n	8001e0e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f7ff ff85 	bl	8001d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	0691      	lsls	r1, r2, #26
 8001e14:	d522      	bpl.n	8001e5c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	0692      	lsls	r2, r2, #26
 8001e1a:	d51f      	bpl.n	8001e5c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e1c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e22:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001e28:	f000 b89a 	b.w	8001f60 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2c:	f7ff ff71 	bl	8001d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff ff70 	bl	8001d16 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e36:	e783      	b.n	8001d40 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e38:	f7ff ff6b 	bl	8001d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff ff6a 	bl	8001d16 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e42:	e792      	b.n	8001d6a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e44:	f7ff ff65 	bl	8001d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7ff ff64 	bl	8001d16 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e4e:	e7a0      	b.n	8001d92 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e50:	f7ff ff5f 	bl	8001d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7ff ff5e 	bl	8001d16 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e5a:	e7af      	b.n	8001dbc <HAL_TIM_IRQHandler+0xa2>
 8001e5c:	bd10      	pop	{r4, pc}
	...

08001e60 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e60:	4a30      	ldr	r2, [pc, #192]	; (8001f24 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001e62:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d012      	beq.n	8001e8e <TIM_Base_SetConfig+0x2e>
 8001e68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e6c:	d00f      	beq.n	8001e8e <TIM_Base_SetConfig+0x2e>
 8001e6e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e72:	4290      	cmp	r0, r2
 8001e74:	d00b      	beq.n	8001e8e <TIM_Base_SetConfig+0x2e>
 8001e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e7a:	4290      	cmp	r0, r2
 8001e7c:	d007      	beq.n	8001e8e <TIM_Base_SetConfig+0x2e>
 8001e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e82:	4290      	cmp	r0, r2
 8001e84:	d003      	beq.n	8001e8e <TIM_Base_SetConfig+0x2e>
 8001e86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e8a:	4290      	cmp	r0, r2
 8001e8c:	d119      	bne.n	8001ec2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e8e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e94:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e96:	4a23      	ldr	r2, [pc, #140]	; (8001f24 <TIM_Base_SetConfig+0xc4>)
 8001e98:	4290      	cmp	r0, r2
 8001e9a:	d029      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001e9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ea0:	d026      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001ea2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ea6:	4290      	cmp	r0, r2
 8001ea8:	d022      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eae:	4290      	cmp	r0, r2
 8001eb0:	d01e      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001eb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eb6:	4290      	cmp	r0, r2
 8001eb8:	d01a      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001eba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001ebe:	4290      	cmp	r0, r2
 8001ec0:	d016      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <TIM_Base_SetConfig+0xc8>)
 8001ec4:	4290      	cmp	r0, r2
 8001ec6:	d013      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001ec8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ecc:	4290      	cmp	r0, r2
 8001ece:	d00f      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001ed0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ed4:	4290      	cmp	r0, r2
 8001ed6:	d00b      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001ed8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001edc:	4290      	cmp	r0, r2
 8001ede:	d007      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee4:	4290      	cmp	r0, r2
 8001ee6:	d003      	beq.n	8001ef0 <TIM_Base_SetConfig+0x90>
 8001ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eec:	4290      	cmp	r0, r2
 8001eee:	d103      	bne.n	8001ef8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef8:	694a      	ldr	r2, [r1, #20]
 8001efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001efe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001f00:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f02:	688b      	ldr	r3, [r1, #8]
 8001f04:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f06:	680b      	ldr	r3, [r1, #0]
 8001f08:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <TIM_Base_SetConfig+0xc4>)
 8001f0c:	4298      	cmp	r0, r3
 8001f0e:	d003      	beq.n	8001f18 <TIM_Base_SetConfig+0xb8>
 8001f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f14:	4298      	cmp	r0, r3
 8001f16:	d101      	bne.n	8001f1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f18:	690b      	ldr	r3, [r1, #16]
 8001f1a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	6143      	str	r3, [r0, #20]
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40014000 	.word	0x40014000

08001f2c <HAL_TIM_Base_Init>:
{
 8001f2c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001f2e:	4604      	mov	r4, r0
 8001f30:	b1a0      	cbz	r0, 8001f5c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f3a:	b91b      	cbnz	r3, 8001f44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001f3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f40:	f7ff fed6 	bl	8001cf0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	2302      	movs	r3, #2
 8001f46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4a:	6820      	ldr	r0, [r4, #0]
 8001f4c:	1d21      	adds	r1, r4, #4
 8001f4e:	f7ff ff87 	bl	8001e60 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001f58:	2000      	movs	r0, #0
 8001f5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f5c:	2001      	movs	r0, #1
}
 8001f5e:	bd10      	pop	{r4, pc}

08001f60 <HAL_TIMEx_CommutCallback>:
 8001f60:	4770      	bx	lr

08001f62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f62:	4770      	bx	lr

08001f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f68:	6806      	ldr	r6, [r0, #0]
 8001f6a:	68c2      	ldr	r2, [r0, #12]
 8001f6c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f6e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f74:	4313      	orrs	r3, r2
 8001f76:	6133      	str	r3, [r6, #16]
{
 8001f78:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f7a:	6883      	ldr	r3, [r0, #8]
 8001f7c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001f7e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f80:	4303      	orrs	r3, r0
 8001f82:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001f84:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f88:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001f8a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f8e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f94:	6973      	ldr	r3, [r6, #20]
 8001f96:	69a2      	ldr	r2, [r4, #24]
 8001f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f9e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fa2:	6173      	str	r3, [r6, #20]
 8001fa4:	4b7a      	ldr	r3, [pc, #488]	; (8002190 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fa6:	d17c      	bne.n	80020a2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fa8:	429e      	cmp	r6, r3
 8001faa:	d003      	beq.n	8001fb4 <UART_SetConfig+0x50>
 8001fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb0:	429e      	cmp	r6, r3
 8001fb2:	d144      	bne.n	800203e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fb4:	f7ff fe6e 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8001fb8:	2519      	movs	r5, #25
 8001fba:	fb05 f300 	mul.w	r3, r5, r0
 8001fbe:	6860      	ldr	r0, [r4, #4]
 8001fc0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fc4:	0040      	lsls	r0, r0, #1
 8001fc6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fd2:	f7ff fe5f 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8001fd6:	6863      	ldr	r3, [r4, #4]
 8001fd8:	4368      	muls	r0, r5
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001fe0:	f7ff fe58 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8001fe4:	6863      	ldr	r3, [r4, #4]
 8001fe6:	4368      	muls	r0, r5
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ff2:	fb09 7313 	mls	r3, r9, r3, r7
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	3332      	adds	r3, #50	; 0x32
 8001ffa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002004:	f7ff fe46 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8002008:	6862      	ldr	r2, [r4, #4]
 800200a:	4368      	muls	r0, r5
 800200c:	0052      	lsls	r2, r2, #1
 800200e:	fbb0 faf2 	udiv	sl, r0, r2
 8002012:	f7ff fe3f 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	4368      	muls	r0, r5
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002020:	fbb3 f3f9 	udiv	r3, r3, r9
 8002024:	fb09 a313 	mls	r3, r9, r3, sl
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	3332      	adds	r3, #50	; 0x32
 800202c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002036:	443b      	add	r3, r7
 8002038:	60b3      	str	r3, [r6, #8]
 800203a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800203e:	f7ff fe19 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8002042:	2519      	movs	r5, #25
 8002044:	fb05 f300 	mul.w	r3, r5, r0
 8002048:	6860      	ldr	r0, [r4, #4]
 800204a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800204e:	0040      	lsls	r0, r0, #1
 8002050:	fbb3 f3f0 	udiv	r3, r3, r0
 8002054:	fbb3 f3f9 	udiv	r3, r3, r9
 8002058:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800205c:	f7ff fe0a 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8002060:	6863      	ldr	r3, [r4, #4]
 8002062:	4368      	muls	r0, r5
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fbb0 f7f3 	udiv	r7, r0, r3
 800206a:	f7ff fe03 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800206e:	6863      	ldr	r3, [r4, #4]
 8002070:	4368      	muls	r0, r5
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fbb0 f3f3 	udiv	r3, r0, r3
 8002078:	fbb3 f3f9 	udiv	r3, r3, r9
 800207c:	fb09 7313 	mls	r3, r9, r3, r7
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	3332      	adds	r3, #50	; 0x32
 8002084:	fbb3 f3f9 	udiv	r3, r3, r9
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800208e:	f7ff fdf1 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8002092:	6862      	ldr	r2, [r4, #4]
 8002094:	4368      	muls	r0, r5
 8002096:	0052      	lsls	r2, r2, #1
 8002098:	fbb0 faf2 	udiv	sl, r0, r2
 800209c:	f7ff fdea 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 80020a0:	e7b9      	b.n	8002016 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020a2:	429e      	cmp	r6, r3
 80020a4:	d002      	beq.n	80020ac <UART_SetConfig+0x148>
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <UART_SetConfig+0x230>)
 80020a8:	429e      	cmp	r6, r3
 80020aa:	d140      	bne.n	800212e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020ac:	f7ff fdf2 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 80020b0:	6867      	ldr	r7, [r4, #4]
 80020b2:	2519      	movs	r5, #25
 80020b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020b8:	fb05 f300 	mul.w	r3, r5, r0
 80020bc:	00bf      	lsls	r7, r7, #2
 80020be:	fbb3 f3f7 	udiv	r3, r3, r7
 80020c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c6:	011f      	lsls	r7, r3, #4
 80020c8:	f7ff fde4 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 80020cc:	6863      	ldr	r3, [r4, #4]
 80020ce:	4368      	muls	r0, r5
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	fbb0 f8f3 	udiv	r8, r0, r3
 80020d6:	f7ff fddd 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 80020da:	6863      	ldr	r3, [r4, #4]
 80020dc:	4368      	muls	r0, r5
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020e8:	fb09 8313 	mls	r3, r9, r3, r8
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	3332      	adds	r3, #50	; 0x32
 80020f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020f4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80020f8:	f7ff fdcc 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 80020fc:	6862      	ldr	r2, [r4, #4]
 80020fe:	4368      	muls	r0, r5
 8002100:	0092      	lsls	r2, r2, #2
 8002102:	fbb0 faf2 	udiv	sl, r0, r2
 8002106:	f7ff fdc5 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800210a:	6863      	ldr	r3, [r4, #4]
 800210c:	4368      	muls	r0, r5
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fbb0 f3f3 	udiv	r3, r0, r3
 8002114:	fbb3 f3f9 	udiv	r3, r3, r9
 8002118:	fb09 a313 	mls	r3, r9, r3, sl
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	3332      	adds	r3, #50	; 0x32
 8002120:	fbb3 f3f9 	udiv	r3, r3, r9
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	ea43 0308 	orr.w	r3, r3, r8
 800212c:	e783      	b.n	8002036 <UART_SetConfig+0xd2>
 800212e:	f7ff fda1 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 8002132:	6867      	ldr	r7, [r4, #4]
 8002134:	2519      	movs	r5, #25
 8002136:	f04f 0964 	mov.w	r9, #100	; 0x64
 800213a:	fb05 f300 	mul.w	r3, r5, r0
 800213e:	00bf      	lsls	r7, r7, #2
 8002140:	fbb3 f3f7 	udiv	r3, r3, r7
 8002144:	fbb3 f3f9 	udiv	r3, r3, r9
 8002148:	011f      	lsls	r7, r3, #4
 800214a:	f7ff fd93 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800214e:	6863      	ldr	r3, [r4, #4]
 8002150:	4368      	muls	r0, r5
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fbb0 f8f3 	udiv	r8, r0, r3
 8002158:	f7ff fd8c 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800215c:	6863      	ldr	r3, [r4, #4]
 800215e:	4368      	muls	r0, r5
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	fbb3 f3f9 	udiv	r3, r3, r9
 800216a:	fb09 8313 	mls	r3, r9, r3, r8
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	3332      	adds	r3, #50	; 0x32
 8002172:	fbb3 f3f9 	udiv	r3, r3, r9
 8002176:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800217a:	f7ff fd7b 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800217e:	6862      	ldr	r2, [r4, #4]
 8002180:	4368      	muls	r0, r5
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	fbb0 faf2 	udiv	sl, r0, r2
 8002188:	f7ff fd74 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 800218c:	e7bd      	b.n	800210a <UART_SetConfig+0x1a6>
 800218e:	bf00      	nop
 8002190:	40011000 	.word	0x40011000
 8002194:	40011400 	.word	0x40011400

08002198 <HAL_UART_Init>:
{
 8002198:	b510      	push	{r4, lr}
  if (huart == NULL)
 800219a:	4604      	mov	r4, r0
 800219c:	b340      	cbz	r0, 80021f0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800219e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021a6:	b91b      	cbnz	r3, 80021b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021ac:	f001 fcba 	bl	8003b24 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80021b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021b2:	2324      	movs	r3, #36	; 0x24
 80021b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021b8:	68d3      	ldr	r3, [r2, #12]
 80021ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff fecf 	bl	8001f64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80021e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80021ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
}
 80021f2:	bd10      	pop	{r4, pc}

080021f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80021f6:	3b01      	subs	r3, #1
 80021f8:	d101      	bne.n	80021fe <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80021fa:	2003      	movs	r0, #3
 80021fc:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80021fe:	6902      	ldr	r2, [r0, #16]
 8002200:	2a00      	cmp	r2, #0
 8002202:	daf8      	bge.n	80021f6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002204:	6903      	ldr	r3, [r0, #16]
 8002206:	4a06      	ldr	r2, [pc, #24]	; (8002220 <USB_CoreReset+0x2c>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800220e:	3a01      	subs	r2, #1
 8002210:	d0f3      	beq.n	80021fa <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002212:	6903      	ldr	r3, [r0, #16]
 8002214:	f013 0301 	ands.w	r3, r3, #1
 8002218:	d1f9      	bne.n	800220e <USB_CoreReset+0x1a>

  return HAL_OK;
 800221a:	4618      	mov	r0, r3
}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	00030d41 	.word	0x00030d41

08002224 <USB_CoreInit>:
{
 8002224:	b084      	sub	sp, #16
 8002226:	b538      	push	{r3, r4, r5, lr}
 8002228:	ad05      	add	r5, sp, #20
 800222a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800222e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002230:	2b01      	cmp	r3, #1
{
 8002232:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002234:	d125      	bne.n	8002282 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002236:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800223e:	68c3      	ldr	r3, [r0, #12]
 8002240:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002248:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800224a:	68c3      	ldr	r3, [r0, #12]
 800224c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002250:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002254:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002256:	bf02      	ittt	eq
 8002258:	68c3      	ldreq	r3, [r0, #12]
 800225a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800225e:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002260:	f7ff ffc8 	bl	80021f4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002264:	9b08      	ldr	r3, [sp, #32]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800226a:	68a3      	ldr	r3, [r4, #8]
 800226c:	f043 0306 	orr.w	r3, r3, #6
 8002270:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002272:	68a3      	ldr	r3, [r4, #8]
 8002274:	f043 0320 	orr.w	r3, r3, #32
 8002278:	60a3      	str	r3, [r4, #8]
}
 800227a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800227e:	b004      	add	sp, #16
 8002280:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002282:	68c3      	ldr	r3, [r0, #12]
 8002284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002288:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800228a:	f7ff ffb3 	bl	80021f4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800228e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002290:	b923      	cbnz	r3, 800229c <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002298:	63a3      	str	r3, [r4, #56]	; 0x38
 800229a:	e7e3      	b.n	8002264 <USB_CoreInit+0x40>
 800229c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800229e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a2:	e7f9      	b.n	8002298 <USB_CoreInit+0x74>

080022a4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80022a4:	6883      	ldr	r3, [r0, #8]
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6083      	str	r3, [r0, #8]
}
 80022ac:	2000      	movs	r0, #0
 80022ae:	4770      	bx	lr

080022b0 <USB_SetCurrentMode>:
{
 80022b0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80022b2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80022b4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80022b6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80022ba:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80022bc:	d108      	bne.n	80022d0 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80022be:	68c3      	ldr	r3, [r0, #12]
 80022c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80022c4:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80022c6:	2032      	movs	r0, #50	; 0x32
 80022c8:	f7fe f946 	bl	8000558 <HAL_Delay>
  return HAL_OK;
 80022cc:	2000      	movs	r0, #0
 80022ce:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80022d0:	b919      	cbnz	r1, 80022da <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80022d2:	68c3      	ldr	r3, [r0, #12]
 80022d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022d8:	e7f4      	b.n	80022c4 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
}
 80022dc:	bd08      	pop	{r3, pc}
	...

080022e0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80022e0:	0189      	lsls	r1, r1, #6
 80022e2:	f041 0120 	orr.w	r1, r1, #32
 80022e6:	4a06      	ldr	r2, [pc, #24]	; (8002300 <USB_FlushTxFifo+0x20>)
 80022e8:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80022ea:	3a01      	subs	r2, #1
 80022ec:	d005      	beq.n	80022fa <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80022ee:	6903      	ldr	r3, [r0, #16]
 80022f0:	f013 0320 	ands.w	r3, r3, #32
 80022f4:	d1f9      	bne.n	80022ea <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80022f6:	4618      	mov	r0, r3
 80022f8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80022fa:	2003      	movs	r0, #3
}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	00030d41 	.word	0x00030d41

08002304 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002304:	2310      	movs	r3, #16
 8002306:	4a06      	ldr	r2, [pc, #24]	; (8002320 <USB_FlushRxFifo+0x1c>)
 8002308:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800230a:	3a01      	subs	r2, #1
 800230c:	d005      	beq.n	800231a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800230e:	6903      	ldr	r3, [r0, #16]
 8002310:	f013 0310 	ands.w	r3, r3, #16
 8002314:	d1f9      	bne.n	800230a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002316:	4618      	mov	r0, r3
 8002318:	4770      	bx	lr
      return HAL_TIMEOUT;
 800231a:	2003      	movs	r0, #3
}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	00030d41 	.word	0x00030d41

08002324 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002324:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002328:	4319      	orrs	r1, r3
 800232a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800232e:	2000      	movs	r0, #0
 8002330:	4770      	bx	lr
	...

08002334 <USB_DevInit>:
{
 8002334:	b084      	sub	sp, #16
 8002336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800233a:	4604      	mov	r4, r0
 800233c:	a809      	add	r0, sp, #36	; 0x24
 800233e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002346:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002348:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800234a:	4619      	mov	r1, r3
 800234c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002350:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8002354:	3301      	adds	r3, #1
 8002356:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002358:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800235a:	d1f7      	bne.n	800234c <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 800235c:	2e00      	cmp	r6, #0
 800235e:	d173      	bne.n	8002448 <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002366:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002368:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800236a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800236e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002376:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800237e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002382:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002388:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800238a:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800238e:	d165      	bne.n	800245c <USB_DevInit+0x128>
    if (cfg.speed == USBD_HS_SPEED)
 8002390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002392:	2900      	cmp	r1, #0
 8002394:	d160      	bne.n	8002458 <USB_DevInit+0x124>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ffc4 	bl	8002324 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800239c:	2110      	movs	r1, #16
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff ff9e 	bl	80022e0 <USB_FlushTxFifo>
 80023a4:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7ff ffac 	bl	8002304 <USB_FlushRxFifo>
 80023ac:	2800      	cmp	r0, #0
 80023ae:	d157      	bne.n	8002460 <USB_DevInit+0x12c>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80023b0:	1c08      	adds	r0, r1, #0
 80023b2:	bf18      	it	ne
 80023b4:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	612b      	str	r3, [r5, #16]
 80023ba:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 80023be:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 80023c0:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 80023c2:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80023c4:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80023c8:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80023cc:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023d0:	4543      	cmp	r3, r8
 80023d2:	d147      	bne.n	8002464 <USB_DevInit+0x130>
 80023d4:	2100      	movs	r1, #0
 80023d6:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80023da:	468e      	mov	lr, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80023dc:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80023e0:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80023e4:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023e8:	428b      	cmp	r3, r1
 80023ea:	d14e      	bne.n	800248a <USB_DevInit+0x156>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80023ec:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80023ee:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80023f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f4:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80023f6:	d107      	bne.n	8002408 <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80023f8:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <USB_DevInit+0x180>)
 80023fa:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80023fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	f043 0303 	orr.w	r3, r3, #3
 8002406:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800240c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002410:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002412:	b91f      	cbnz	r7, 800241c <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002414:	69a3      	ldr	r3, [r4, #24]
 8002416:	f043 0310 	orr.w	r3, r3, #16
 800241a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800241c:	69a2      	ldr	r2, [r4, #24]
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <USB_DevInit+0x184>)
 8002420:	4313      	orrs	r3, r2
 8002422:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002426:	b11b      	cbz	r3, 8002430 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002428:	69a3      	ldr	r3, [r4, #24]
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002430:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002432:	bf01      	itttt	eq
 8002434:	69a3      	ldreq	r3, [r4, #24]
 8002436:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800243a:	f043 0304 	orreq.w	r3, r3, #4
 800243e:	61a3      	streq	r3, [r4, #24]
}
 8002440:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002444:	b004      	add	sp, #16
 8002446:	4770      	bx	lr
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002448:	6823      	ldr	r3, [r4, #0]
 800244a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800244e:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002456:	e78e      	b.n	8002376 <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002458:	4619      	mov	r1, r3
 800245a:	e79c      	b.n	8002396 <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800245c:	2103      	movs	r1, #3
 800245e:	e79a      	b.n	8002396 <USB_DevInit+0x62>
 8002460:	2001      	movs	r0, #1
 8002462:	e7a8      	b.n	80023b6 <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002464:	f8d2 a000 	ldr.w	sl, [r2]
 8002468:	f1ba 0f00 	cmp.w	sl, #0
 800246c:	da0b      	bge.n	8002486 <USB_DevInit+0x152>
      if (i == 0U)
 800246e:	b93b      	cbnz	r3, 8002480 <USB_DevInit+0x14c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002470:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002474:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002476:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002478:	f8c2 9008 	str.w	r9, [r2, #8]
 800247c:	3220      	adds	r2, #32
 800247e:	e7a7      	b.n	80023d0 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002480:	f8c2 e000 	str.w	lr, [r2]
 8002484:	e7f6      	b.n	8002474 <USB_DevInit+0x140>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002486:	6011      	str	r1, [r2, #0]
 8002488:	e7f4      	b.n	8002474 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800248a:	f8d2 a000 	ldr.w	sl, [r2]
 800248e:	f1ba 0f00 	cmp.w	sl, #0
 8002492:	da0c      	bge.n	80024ae <USB_DevInit+0x17a>
      if (i == 0U)
 8002494:	b941      	cbnz	r1, 80024a8 <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002496:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800249a:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800249e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80024a0:	f8c2 9008 	str.w	r9, [r2, #8]
 80024a4:	3220      	adds	r2, #32
 80024a6:	e79f      	b.n	80023e8 <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80024a8:	f8c2 c000 	str.w	ip, [r2]
 80024ac:	e7f5      	b.n	800249a <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80024ae:	f8c2 e000 	str.w	lr, [r2]
 80024b2:	e7f2      	b.n	800249a <USB_DevInit+0x166>
 80024b4:	00800100 	.word	0x00800100
 80024b8:	803c3800 	.word	0x803c3800

080024bc <USB_DevDisconnect>:
{
 80024bc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80024be:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f7fe f844 	bl	8000558 <HAL_Delay>
}
 80024d0:	2000      	movs	r0, #0
 80024d2:	bd08      	pop	{r3, pc}

080024d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024d4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80024d6:	f000 fcab 	bl	8002e30 <vTaskStartScheduler>
  
  return osOK;
}
 80024da:	2000      	movs	r0, #0
 80024dc:	bd08      	pop	{r3, pc}

080024de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024de:	b570      	push	{r4, r5, r6, lr}
 80024e0:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024e2:	6946      	ldr	r6, [r0, #20]
 80024e4:	692a      	ldr	r2, [r5, #16]
 80024e6:	6840      	ldr	r0, [r0, #4]
 80024e8:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80024ec:	460b      	mov	r3, r1
 80024ee:	b086      	sub	sp, #24
 80024f0:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024f2:	b176      	cbz	r6, 8002512 <osThreadCreate+0x34>
 80024f4:	69ad      	ldr	r5, [r5, #24]
 80024f6:	b165      	cbz	r5, 8002512 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80024f8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80024fa:	bf14      	ite	ne
 80024fc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024fe:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002500:	9502      	str	r5, [sp, #8]
 8002502:	e88d 0050 	stmia.w	sp, {r4, r6}
 8002506:	f000 fc2f 	bl	8002d68 <xTaskCreateStatic>
 800250a:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800250c:	9805      	ldr	r0, [sp, #20]
}
 800250e:	b006      	add	sp, #24
 8002510:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8002512:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8002514:	bf14      	ite	ne
 8002516:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002518:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800251a:	ad05      	add	r5, sp, #20
 800251c:	b292      	uxth	r2, r2
 800251e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002522:	f000 fc58 	bl	8002dd6 <xTaskCreate>
 8002526:	2801      	cmp	r0, #1
 8002528:	d0f0      	beq.n	800250c <osThreadCreate+0x2e>
      return NULL;
 800252a:	2000      	movs	r0, #0
 800252c:	e7ef      	b.n	800250e <osThreadCreate+0x30>

0800252e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800252e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002530:	2800      	cmp	r0, #0
 8002532:	bf08      	it	eq
 8002534:	2001      	moveq	r0, #1
 8002536:	f000 fdc3 	bl	80030c0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800253a:	2000      	movs	r0, #0
 800253c:	bd08      	pop	{r3, pc}

0800253e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800253e:	f100 0308 	add.w	r3, r0, #8
 8002542:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002548:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800254a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800254c:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800254e:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002550:	6003      	str	r3, [r0, #0]
 8002552:	4770      	bx	lr

08002554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002554:	2300      	movs	r3, #0
 8002556:	6103      	str	r3, [r0, #16]
 8002558:	4770      	bx	lr

0800255a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800255a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800255c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002566:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002568:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800256a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800256c:	3301      	adds	r3, #1
 800256e:	6003      	str	r3, [r0, #0]
 8002570:	4770      	bx	lr

08002572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002572:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002574:	1c53      	adds	r3, r2, #1
{
 8002576:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002578:	d10a      	bne.n	8002590 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800257a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002580:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002582:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002584:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002586:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002588:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800258a:	3301      	adds	r3, #1
 800258c:	6003      	str	r3, [r0, #0]
 800258e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002590:	f100 0308 	add.w	r3, r0, #8
 8002594:	685c      	ldr	r4, [r3, #4]
 8002596:	6825      	ldr	r5, [r4, #0]
 8002598:	42aa      	cmp	r2, r5
 800259a:	d3ef      	bcc.n	800257c <vListInsert+0xa>
 800259c:	4623      	mov	r3, r4
 800259e:	e7f9      	b.n	8002594 <vListInsert+0x22>

080025a0 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025a0:	6841      	ldr	r1, [r0, #4]
 80025a2:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80025a4:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025a6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025a8:	6882      	ldr	r2, [r0, #8]
 80025aa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025b0:	bf08      	it	eq
 80025b2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80025b4:	2200      	movs	r2, #0
 80025b6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	3a01      	subs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025be:	6818      	ldr	r0, [r3, #0]
}
 80025c0:	4770      	bx	lr
	...

080025c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <prvTaskExitError+0x3c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	d008      	beq.n	80025e4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	e7fe      	b.n	80025e2 <prvTaskExitError+0x1e>
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80025f4:	9b01      	ldr	r3, [sp, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0fc      	beq.n	80025f4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80025fa:	b002      	add	sp, #8
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000004 	.word	0x20000004

08002604 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002604:	4808      	ldr	r0, [pc, #32]	; (8002628 <prvPortStartFirstTask+0x24>)
 8002606:	6800      	ldr	r0, [r0, #0]
 8002608:	6800      	ldr	r0, [r0, #0]
 800260a:	f380 8808 	msr	MSP, r0
 800260e:	f04f 0000 	mov.w	r0, #0
 8002612:	f380 8814 	msr	CONTROL, r0
 8002616:	b662      	cpsie	i
 8002618:	b661      	cpsie	f
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	df00      	svc	0
 8002624:	bf00      	nop
 8002626:	0000      	.short	0x0000
 8002628:	e000ed08 	.word	0xe000ed08

0800262c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800262c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800263c <vPortEnableVFP+0x10>
 8002630:	6801      	ldr	r1, [r0, #0]
 8002632:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002636:	6001      	str	r1, [r0, #0]
 8002638:	4770      	bx	lr
 800263a:	0000      	.short	0x0000
 800263c:	e000ed88 	.word	0xe000ed88

08002640 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <pxPortInitialiseStack+0x28>)
 800264a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800264e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002652:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002656:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800265a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800265e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002662:	3844      	subs	r0, #68	; 0x44
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	080025c5 	.word	0x080025c5
 800266c:	00000000 	.word	0x00000000

08002670 <SVC_Handler>:
	__asm volatile (
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <pxCurrentTCBConst2>)
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	6808      	ldr	r0, [r1, #0]
 8002676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800267a:	f380 8809 	msr	PSP, r0
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f04f 0000 	mov.w	r0, #0
 8002686:	f380 8811 	msr	BASEPRI, r0
 800268a:	4770      	bx	lr
 800268c:	f3af 8000 	nop.w

08002690 <pxCurrentTCBConst2>:
 8002690:	20003c48 	.word	0x20003c48

08002694 <vPortEnterCritical>:
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <vPortEnterCritical+0x3c>)
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80026aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80026ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80026ae:	d10d      	bne.n	80026cc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <vPortEnterCritical+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80026b8:	d008      	beq.n	80026cc <vPortEnterCritical+0x38>
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	e7fe      	b.n	80026ca <vPortEnterCritical+0x36>
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000004 	.word	0x20000004
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80026d8:	4a08      	ldr	r2, [pc, #32]	; (80026fc <vPortExitCritical+0x24>)
 80026da:	6813      	ldr	r3, [r2, #0]
 80026dc:	b943      	cbnz	r3, 80026f0 <vPortExitCritical+0x18>
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	e7fe      	b.n	80026ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80026f0:	3b01      	subs	r3, #1
 80026f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80026f4:	b90b      	cbnz	r3, 80026fa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	4770      	bx	lr
 80026fc:	20000004 	.word	0x20000004

08002700 <PendSV_Handler>:
	__asm volatile
 8002700:	f3ef 8009 	mrs	r0, PSP
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	4b15      	ldr	r3, [pc, #84]	; (8002760 <pxCurrentTCBConst>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f01e 0f10 	tst.w	lr, #16
 8002710:	bf08      	it	eq
 8002712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800271a:	6010      	str	r0, [r2, #0]
 800271c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002724:	f380 8811 	msr	BASEPRI, r0
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f000 fcea 	bl	8003108 <vTaskSwitchContext>
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f380 8811 	msr	BASEPRI, r0
 800273c:	bc09      	pop	{r0, r3}
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	6808      	ldr	r0, [r1, #0]
 8002742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002746:	f01e 0f10 	tst.w	lr, #16
 800274a:	bf08      	it	eq
 800274c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002750:	f380 8809 	msr	PSP, r0
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	f3af 8000 	nop.w

08002760 <pxCurrentTCBConst>:
 8002760:	20003c48 	.word	0x20003c48

08002764 <SysTick_Handler>:
{
 8002764:	b508      	push	{r3, lr}
	__asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002776:	f000 fb99 	bl	8002eac <xTaskIncrementTick>
 800277a:	b118      	cbz	r0, 8002784 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <SysTick_Handler+0x28>)
 800277e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002782:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002784:	2300      	movs	r3, #0
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	bd08      	pop	{r3, pc}
 800278c:	e000ed04 	.word	0xe000ed04

08002790 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002790:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002792:	4909      	ldr	r1, [pc, #36]	; (80027b8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002794:	2300      	movs	r3, #0
 8002796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002798:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <vPortSetupTimerInterrupt+0x2c>)
 800279c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027a6:	4906      	ldr	r1, [pc, #24]	; (80027c0 <vPortSetupTimerInterrupt+0x30>)
 80027a8:	3b01      	subs	r3, #1
 80027aa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80027ac:	2307      	movs	r3, #7
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010
 80027b8:	e000e018 	.word	0xe000e018
 80027bc:	20000008 	.word	0x20000008
 80027c0:	e000e014 	.word	0xe000e014

080027c4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <xPortStartScheduler+0xe8>)
 80027c6:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <xPortStartScheduler+0xec>)
{
 80027c8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80027ca:	6819      	ldr	r1, [r3, #0]
 80027cc:	4291      	cmp	r1, r2
 80027ce:	d108      	bne.n	80027e2 <xPortStartScheduler+0x1e>
	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	e7fe      	b.n	80027e0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b33      	ldr	r3, [pc, #204]	; (80028b4 <xPortStartScheduler+0xf0>)
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d108      	bne.n	80027fc <xPortStartScheduler+0x38>
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	e7fe      	b.n	80027fa <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <xPortStartScheduler+0xf4>)
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002808:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800280a:	4a2c      	ldr	r2, [pc, #176]	; (80028bc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002812:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002816:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800281a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <xPortStartScheduler+0xfc>)
 800281e:	2207      	movs	r2, #7
 8002820:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002822:	2100      	movs	r1, #0
 8002824:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002828:	0600      	lsls	r0, r0, #24
 800282a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 800282e:	d40d      	bmi.n	800284c <xPortStartScheduler+0x88>
 8002830:	b101      	cbz	r1, 8002834 <xPortStartScheduler+0x70>
 8002832:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2a03      	cmp	r2, #3
 8002838:	d011      	beq.n	800285e <xPortStartScheduler+0x9a>
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	e7fe      	b.n	800284a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800284c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002850:	0052      	lsls	r2, r2, #1
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	f88d 2003 	strb.w	r2, [sp, #3]
 8002858:	2101      	movs	r1, #1
 800285a:	4622      	mov	r2, r4
 800285c:	e7e2      	b.n	8002824 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800285e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002860:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002864:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002866:	9b01      	ldr	r3, [sp, #4]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <xPortStartScheduler+0xf4>)
 800286a:	b2db      	uxtb	r3, r3
 800286c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <xPortStartScheduler+0x100>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002876:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800287e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002880:	f7ff ff86 	bl	8002790 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <xPortStartScheduler+0x104>)
 8002886:	2400      	movs	r4, #0
 8002888:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800288a:	f7ff fecf 	bl	800262c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <xPortStartScheduler+0x108>)
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002896:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002898:	f7ff feb4 	bl	8002604 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800289c:	f000 fc34 	bl	8003108 <vTaskSwitchContext>
	prvTaskExitError();
 80028a0:	f7ff fe90 	bl	80025c4 <prvTaskExitError>
}
 80028a4:	4620      	mov	r0, r4
 80028a6:	b002      	add	sp, #8
 80028a8:	bd10      	pop	{r4, pc}
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00
 80028b0:	410fc271 	.word	0x410fc271
 80028b4:	410fc270 	.word	0x410fc270
 80028b8:	e000e400 	.word	0xe000e400
 80028bc:	20000028 	.word	0x20000028
 80028c0:	2000002c 	.word	0x2000002c
 80028c4:	e000ed20 	.word	0xe000ed20
 80028c8:	20000004 	.word	0x20000004
 80028cc:	e000ef34 	.word	0xe000ef34

080028d0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80028d0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <prvInsertBlockIntoFreeList+0x40>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4282      	cmp	r2, r0
 80028d8:	d318      	bcc.n	800290c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028da:	685c      	ldr	r4, [r3, #4]
 80028dc:	1919      	adds	r1, r3, r4
 80028de:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028e0:	bf01      	itttt	eq
 80028e2:	6841      	ldreq	r1, [r0, #4]
 80028e4:	4618      	moveq	r0, r3
 80028e6:	1909      	addeq	r1, r1, r4
 80028e8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028ea:	6844      	ldr	r4, [r0, #4]
 80028ec:	1901      	adds	r1, r0, r4
 80028ee:	428a      	cmp	r2, r1
 80028f0:	d107      	bne.n	8002902 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <prvInsertBlockIntoFreeList+0x44>)
 80028f4:	6809      	ldr	r1, [r1, #0]
 80028f6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80028f8:	bf1f      	itttt	ne
 80028fa:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80028fc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80028fe:	1909      	addne	r1, r1, r4
 8002900:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002902:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002904:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002906:	bf18      	it	ne
 8002908:	6018      	strne	r0, [r3, #0]
 800290a:	bd10      	pop	{r4, pc}
 800290c:	4613      	mov	r3, r2
 800290e:	e7e1      	b.n	80028d4 <prvInsertBlockIntoFreeList+0x4>
 8002910:	20003c40 	.word	0x20003c40
 8002914:	20000030 	.word	0x20000030

08002918 <pvPortMalloc>:
{
 8002918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800291c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800291e:	f000 fabd 	bl	8002e9c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002922:	493e      	ldr	r1, [pc, #248]	; (8002a1c <pvPortMalloc+0x104>)
 8002924:	4d3e      	ldr	r5, [pc, #248]	; (8002a20 <pvPortMalloc+0x108>)
 8002926:	680b      	ldr	r3, [r1, #0]
 8002928:	bb0b      	cbnz	r3, 800296e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800292a:	4a3e      	ldr	r2, [pc, #248]	; (8002a24 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800292c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800292e:	bf1f      	itttt	ne
 8002930:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002932:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002936:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800293a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800293c:	bf14      	ite	ne
 800293e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002940:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002944:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002946:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002948:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800294c:	4e36      	ldr	r6, [pc, #216]	; (8002a28 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800294e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002950:	2000      	movs	r0, #0
 8002952:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002954:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002956:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002958:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800295a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800295c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800295e:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002960:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002962:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <pvPortMalloc+0x118>)
 8002966:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800296c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800296e:	682f      	ldr	r7, [r5, #0]
 8002970:	4227      	tst	r7, r4
 8002972:	d116      	bne.n	80029a2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002974:	2c00      	cmp	r4, #0
 8002976:	d041      	beq.n	80029fc <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002978:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800297c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800297e:	bf1c      	itt	ne
 8002980:	f023 0307 	bicne.w	r3, r3, #7
 8002984:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002986:	b163      	cbz	r3, 80029a2 <pvPortMalloc+0x8a>
 8002988:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <pvPortMalloc+0x118>)
 800298a:	6816      	ldr	r6, [r2, #0]
 800298c:	42b3      	cmp	r3, r6
 800298e:	4690      	mov	r8, r2
 8002990:	d807      	bhi.n	80029a2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <pvPortMalloc+0x110>)
 8002994:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002996:	6868      	ldr	r0, [r5, #4]
 8002998:	4283      	cmp	r3, r0
 800299a:	d804      	bhi.n	80029a6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 800299c:	6809      	ldr	r1, [r1, #0]
 800299e:	428d      	cmp	r5, r1
 80029a0:	d107      	bne.n	80029b2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80029a2:	2400      	movs	r4, #0
 80029a4:	e02a      	b.n	80029fc <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029a6:	682c      	ldr	r4, [r5, #0]
 80029a8:	2c00      	cmp	r4, #0
 80029aa:	d0f7      	beq.n	800299c <pvPortMalloc+0x84>
 80029ac:	462a      	mov	r2, r5
 80029ae:	4625      	mov	r5, r4
 80029b0:	e7f1      	b.n	8002996 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029b2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029b4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029b6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029b8:	1ac2      	subs	r2, r0, r3
 80029ba:	2a10      	cmp	r2, #16
 80029bc:	d90f      	bls.n	80029de <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029be:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029c0:	0741      	lsls	r1, r0, #29
 80029c2:	d008      	beq.n	80029d6 <pvPortMalloc+0xbe>
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	e7fe      	b.n	80029d4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80029d6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80029d8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80029da:	f7ff ff79 	bl	80028d0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80029de:	4913      	ldr	r1, [pc, #76]	; (8002a2c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80029e0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80029e2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80029e4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80029e6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80029e8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80029ea:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80029ee:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80029f2:	bf38      	it	cc
 80029f4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029f6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80029f8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80029fa:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80029fc:	f000 fae8 	bl	8002fd0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a00:	0763      	lsls	r3, r4, #29
 8002a02:	d008      	beq.n	8002a16 <pvPortMalloc+0xfe>
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	e7fe      	b.n	8002a14 <pvPortMalloc+0xfc>
}
 8002a16:	4620      	mov	r0, r4
 8002a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a1c:	20000030 	.word	0x20000030
 8002a20:	20003c34 	.word	0x20003c34
 8002a24:	20000034 	.word	0x20000034
 8002a28:	20003c40 	.word	0x20003c40
 8002a2c:	20003c3c 	.word	0x20003c3c
 8002a30:	20003c38 	.word	0x20003c38

08002a34 <vPortFree>:
{
 8002a34:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002a36:	4604      	mov	r4, r0
 8002a38:	b370      	cbz	r0, 8002a98 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <vPortFree+0x68>)
 8002a3c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4213      	tst	r3, r2
 8002a44:	d108      	bne.n	8002a58 <vPortFree+0x24>
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	e7fe      	b.n	8002a56 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002a58:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002a5c:	b141      	cbz	r1, 8002a70 <vPortFree+0x3c>
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	e7fe      	b.n	8002a6e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002a70:	ea23 0302 	bic.w	r3, r3, r2
 8002a74:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002a78:	f000 fa10 	bl	8002e9c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a7c:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <vPortFree+0x6c>)
 8002a7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002a82:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a84:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a88:	440b      	add	r3, r1
 8002a8a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a8c:	f7ff ff20 	bl	80028d0 <prvInsertBlockIntoFreeList>
}
 8002a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002a94:	f000 ba9c 	b.w	8002fd0 <xTaskResumeAll>
 8002a98:	bd10      	pop	{r4, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20003c34 	.word	0x20003c34
 8002aa0:	20003c38 	.word	0x20003c38

08002aa4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa8:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002aaa:	f7ff fdf3 	bl	8002694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002aae:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002ab0:	4c2d      	ldr	r4, [pc, #180]	; (8002b68 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4f2d      	ldr	r7, [pc, #180]	; (8002b6c <prvAddNewTaskToReadyList+0xc8>)
 8002ab6:	3201      	adds	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002aba:	6825      	ldr	r5, [r4, #0]
 8002abc:	2d00      	cmp	r5, #0
 8002abe:	d145      	bne.n	8002b4c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ac0:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d11c      	bne.n	8002b02 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ac8:	1978      	adds	r0, r7, r5
 8002aca:	3514      	adds	r5, #20
 8002acc:	f7ff fd37 	bl	800253e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ad0:	2d8c      	cmp	r5, #140	; 0x8c
 8002ad2:	d1f9      	bne.n	8002ac8 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ad4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002b98 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8002ad8:	4d25      	ldr	r5, [pc, #148]	; (8002b70 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8002ada:	4640      	mov	r0, r8
 8002adc:	f7ff fd2f 	bl	800253e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f7ff fd2c 	bl	800253e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ae6:	4823      	ldr	r0, [pc, #140]	; (8002b74 <prvAddNewTaskToReadyList+0xd0>)
 8002ae8:	f7ff fd29 	bl	800253e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002aec:	4822      	ldr	r0, [pc, #136]	; (8002b78 <prvAddNewTaskToReadyList+0xd4>)
 8002aee:	f7ff fd26 	bl	800253e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002af2:	4822      	ldr	r0, [pc, #136]	; (8002b7c <prvAddNewTaskToReadyList+0xd8>)
 8002af4:	f7ff fd23 	bl	800253e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <prvAddNewTaskToReadyList+0xdc>)
 8002afa:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002afe:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <prvAddNewTaskToReadyList+0xe0>)
 8002b00:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002b02:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8002b04:	4921      	ldr	r1, [pc, #132]	; (8002b8c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8002b06:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002b08:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002b0e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002b10:	2301      	movs	r3, #1
 8002b12:	4093      	lsls	r3, r2
 8002b14:	4303      	orrs	r3, r0
 8002b16:	2014      	movs	r0, #20
 8002b18:	600b      	str	r3, [r1, #0]
 8002b1a:	fb00 7002 	mla	r0, r0, r2, r7
 8002b1e:	1d31      	adds	r1, r6, #4
 8002b20:	f7ff fd1b 	bl	800255a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002b24:	f7ff fdd8 	bl	80026d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <prvAddNewTaskToReadyList+0xec>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b163      	cbz	r3, 8002b48 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b32:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d207      	bcs.n	8002b48 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <prvAddNewTaskToReadyList+0xf0>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002b4c:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <prvAddNewTaskToReadyList+0xec>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1d6      	bne.n	8002b02 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002b5a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002b5c:	bf98      	it	ls
 8002b5e:	6026      	strls	r6, [r4, #0]
 8002b60:	e7cf      	b.n	8002b02 <prvAddNewTaskToReadyList+0x5e>
 8002b62:	bf00      	nop
 8002b64:	20003ce0 	.word	0x20003ce0
 8002b68:	20003c48 	.word	0x20003c48
 8002b6c:	20003c54 	.word	0x20003c54
 8002b70:	20003d0c 	.word	0x20003d0c
 8002b74:	20003d28 	.word	0x20003d28
 8002b78:	20003d54 	.word	0x20003d54
 8002b7c:	20003d40 	.word	0x20003d40
 8002b80:	20003c4c 	.word	0x20003c4c
 8002b84:	20003c50 	.word	0x20003c50
 8002b88:	20003cf0 	.word	0x20003cf0
 8002b8c:	20003cf4 	.word	0x20003cf4
 8002b90:	20003d3c 	.word	0x20003d3c
 8002b94:	e000ed04 	.word	0xe000ed04
 8002b98:	20003cf8 	.word	0x20003cf8

08002b9c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b9c:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <prvResetNextTaskUnblockTime+0x1c>)
 8002b9e:	6813      	ldr	r3, [r2, #0]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <prvResetNextTaskUnblockTime+0x20>)
 8002ba4:	b919      	cbnz	r1, 8002bae <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bb2:	68d2      	ldr	r2, [r2, #12]
 8002bb4:	6852      	ldr	r2, [r2, #4]
 8002bb6:	e7f8      	b.n	8002baa <prvResetNextTaskUnblockTime+0xe>
 8002bb8:	20003c4c 	.word	0x20003c4c
 8002bbc:	20003d20 	.word	0x20003d20

08002bc0 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002bc6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002bca:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002bcc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002bd0:	3a01      	subs	r2, #1
 8002bd2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002bd6:	469a      	mov	sl, r3
 8002bd8:	4681      	mov	r9, r0
 8002bda:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002bdc:	f026 0607 	bic.w	r6, r6, #7
 8002be0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002be4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002be6:	7858      	ldrb	r0, [r3, #1]
 8002be8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002bec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002bf0:	b108      	cbz	r0, 8002bf6 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bf2:	428b      	cmp	r3, r1
 8002bf4:	d1f7      	bne.n	8002be6 <prvInitialiseNewTask.isra.2+0x26>
 8002bf6:	9d08      	ldr	r5, [sp, #32]
 8002bf8:	2d06      	cmp	r5, #6
 8002bfa:	bf28      	it	cs
 8002bfc:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bfe:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8002c00:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002c02:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c04:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c06:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002c0a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c0c:	f7ff fca2 	bl	8002554 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c10:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c14:	f104 0018 	add.w	r0, r4, #24
 8002c18:	f7ff fc9c 	bl	8002554 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002c1c:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c1e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c20:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c22:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c24:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c28:	4652      	mov	r2, sl
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f7ff fd07 	bl	8002640 <pxPortInitialiseStack>
 8002c32:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002c34:	f1b8 0f00 	cmp.w	r8, #0
 8002c38:	d001      	beq.n	8002c3e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c3a:	f8c8 4000 	str.w	r4, [r8]
 8002c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002c42 <prvDeleteTCB>:
	{
 8002c42:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c44:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002c48:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c4a:	b93b      	cbnz	r3, 8002c5c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8002c4c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002c4e:	f7ff fef1 	bl	8002a34 <vPortFree>
				vPortFree( pxTCB );
 8002c52:	4620      	mov	r0, r4
	}
 8002c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002c58:	f7ff beec 	b.w	8002a34 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d0f9      	beq.n	8002c54 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d008      	beq.n	8002c76 <prvDeleteTCB+0x34>
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	e7fe      	b.n	8002c74 <prvDeleteTCB+0x32>
 8002c76:	bd10      	pop	{r4, pc}

08002c78 <prvIdleTask>:
{
 8002c78:	b580      	push	{r7, lr}
				taskYIELD();
 8002c7a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002cd8 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c7e:	4f12      	ldr	r7, [pc, #72]	; (8002cc8 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c80:	4c12      	ldr	r4, [pc, #72]	; (8002ccc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002c82:	4d13      	ldr	r5, [pc, #76]	; (8002cd0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	b963      	cbnz	r3, 8002ca2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <prvIdleTask+0x5c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d9f8      	bls.n	8002c82 <prvIdleTask+0xa>
				taskYIELD();
 8002c90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c94:	f8c8 3000 	str.w	r3, [r8]
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	e7ee      	b.n	8002c80 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002ca2:	f7ff fcf7 	bl	8002694 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002caa:	1d30      	adds	r0, r6, #4
 8002cac:	f7ff fc78 	bl	80025a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002cb0:	682b      	ldr	r3, [r5, #0]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002cbc:	f7ff fd0c 	bl	80026d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f7ff ffbe 	bl	8002c42 <prvDeleteTCB>
 8002cc6:	e7dd      	b.n	8002c84 <prvIdleTask+0xc>
 8002cc8:	20003d54 	.word	0x20003d54
 8002ccc:	20003ce4 	.word	0x20003ce4
 8002cd0:	20003ce0 	.word	0x20003ce0
 8002cd4:	20003c54 	.word	0x20003c54
 8002cd8:	e000ed04 	.word	0xe000ed04

08002cdc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ce0:	4e1b      	ldr	r6, [pc, #108]	; (8002d50 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002ce2:	681d      	ldr	r5, [r3, #0]
{
 8002ce4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ce6:	6830      	ldr	r0, [r6, #0]
 8002ce8:	3004      	adds	r0, #4
{
 8002cea:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cec:	f7ff fc58 	bl	80025a0 <uxListRemove>
 8002cf0:	4633      	mov	r3, r6
 8002cf2:	b940      	cbnz	r0, 8002d06 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002cf4:	6831      	ldr	r1, [r6, #0]
 8002cf6:	4e17      	ldr	r6, [pc, #92]	; (8002d54 <prvAddCurrentTaskToDelayedList+0x78>)
 8002cf8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002cfa:	6832      	ldr	r2, [r6, #0]
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	4088      	lsls	r0, r1
 8002d00:	ea22 0200 	bic.w	r2, r2, r0
 8002d04:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d06:	1c62      	adds	r2, r4, #1
 8002d08:	d107      	bne.n	8002d1a <prvAddCurrentTaskToDelayedList+0x3e>
 8002d0a:	b137      	cbz	r7, 8002d1a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	4812      	ldr	r0, [pc, #72]	; (8002d58 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002d10:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d16:	f7ff bc20 	b.w	800255a <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d1a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d1c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002d1e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d20:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002d22:	d907      	bls.n	8002d34 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <prvAddCurrentTaskToDelayedList+0x80>)
 8002d26:	6810      	ldr	r0, [r2, #0]
 8002d28:	6819      	ldr	r1, [r3, #0]
}
 8002d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d2e:	3104      	adds	r1, #4
 8002d30:	f7ff bc1f 	b.w	8002572 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <prvAddCurrentTaskToDelayedList+0x84>)
 8002d36:	6810      	ldr	r0, [r2, #0]
 8002d38:	6819      	ldr	r1, [r3, #0]
 8002d3a:	3104      	adds	r1, #4
 8002d3c:	f7ff fc19 	bl	8002572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <prvAddCurrentTaskToDelayedList+0x88>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002d46:	bf38      	it	cc
 8002d48:	601c      	strcc	r4, [r3, #0]
 8002d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d4c:	20003d68 	.word	0x20003d68
 8002d50:	20003c48 	.word	0x20003c48
 8002d54:	20003cf4 	.word	0x20003cf4
 8002d58:	20003d40 	.word	0x20003d40
 8002d5c:	20003c50 	.word	0x20003c50
 8002d60:	20003c4c 	.word	0x20003c4c
 8002d64:	20003d20 	.word	0x20003d20

08002d68 <xTaskCreateStatic>:
	{
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002d6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002d70:	b945      	cbnz	r5, 8002d84 <xTaskCreateStatic+0x1c>
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	e7fe      	b.n	8002d82 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002d84:	b944      	cbnz	r4, 8002d98 <xTaskCreateStatic+0x30>
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	e7fe      	b.n	8002d96 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d98:	2654      	movs	r6, #84	; 0x54
 8002d9a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d9c:	9e04      	ldr	r6, [sp, #16]
 8002d9e:	2e54      	cmp	r6, #84	; 0x54
 8002da0:	d008      	beq.n	8002db4 <xTaskCreateStatic+0x4c>
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	e7fe      	b.n	8002db2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002db4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002db6:	2502      	movs	r5, #2
 8002db8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dbc:	ad05      	add	r5, sp, #20
 8002dbe:	9501      	str	r5, [sp, #4]
 8002dc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002dc2:	9402      	str	r4, [sp, #8]
 8002dc4:	9500      	str	r5, [sp, #0]
 8002dc6:	f7ff fefb 	bl	8002bc0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7ff fe6a 	bl	8002aa4 <prvAddNewTaskToReadyList>
	}
 8002dd0:	9805      	ldr	r0, [sp, #20]
 8002dd2:	b006      	add	sp, #24
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}

08002dd6 <xTaskCreate>:
	{
 8002dd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dda:	4607      	mov	r7, r0
 8002ddc:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dde:	0090      	lsls	r0, r2, #2
	{
 8002de0:	4688      	mov	r8, r1
 8002de2:	4616      	mov	r6, r2
 8002de4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de6:	f7ff fd97 	bl	8002918 <pvPortMalloc>
			if( pxStack != NULL )
 8002dea:	4605      	mov	r5, r0
 8002dec:	b1e8      	cbz	r0, 8002e2a <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002dee:	2054      	movs	r0, #84	; 0x54
 8002df0:	f7ff fd92 	bl	8002918 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002df4:	4604      	mov	r4, r0
 8002df6:	b1a8      	cbz	r0, 8002e24 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002e00:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e06:	9002      	str	r0, [sp, #8]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	4632      	mov	r2, r6
 8002e0c:	464b      	mov	r3, r9
 8002e0e:	4641      	mov	r1, r8
 8002e10:	4638      	mov	r0, r7
 8002e12:	f7ff fed5 	bl	8002bc0 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e16:	4620      	mov	r0, r4
 8002e18:	f7ff fe44 	bl	8002aa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e1c:	2001      	movs	r0, #1
	}
 8002e1e:	b005      	add	sp, #20
 8002e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002e24:	4628      	mov	r0, r5
 8002e26:	f7ff fe05 	bl	8002a34 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8002e2e:	e7f6      	b.n	8002e1e <xTaskCreate+0x48>

08002e30 <vTaskStartScheduler>:
{
 8002e30:	b510      	push	{r4, lr}
 8002e32:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e34:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e36:	aa07      	add	r2, sp, #28
 8002e38:	a906      	add	r1, sp, #24
 8002e3a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e3c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e3e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e40:	f000 fb2e 	bl	80034a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e44:	9b05      	ldr	r3, [sp, #20]
 8002e46:	9302      	str	r3, [sp, #8]
 8002e48:	9b06      	ldr	r3, [sp, #24]
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	9400      	str	r4, [sp, #0]
 8002e4e:	4623      	mov	r3, r4
 8002e50:	9a07      	ldr	r2, [sp, #28]
 8002e52:	490d      	ldr	r1, [pc, #52]	; (8002e88 <vTaskStartScheduler+0x58>)
 8002e54:	480d      	ldr	r0, [pc, #52]	; (8002e8c <vTaskStartScheduler+0x5c>)
 8002e56:	f7ff ff87 	bl	8002d68 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002e5a:	b190      	cbz	r0, 8002e82 <vTaskStartScheduler+0x52>
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <vTaskStartScheduler+0x60>)
 8002e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <vTaskStartScheduler+0x64>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <vTaskStartScheduler+0x68>)
 8002e7c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002e7e:	f7ff fca1 	bl	80027c4 <xPortStartScheduler>
}
 8002e82:	b008      	add	sp, #32
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	bf00      	nop
 8002e88:	08003d30 	.word	0x08003d30
 8002e8c:	08002c79 	.word	0x08002c79
 8002e90:	20003d20 	.word	0x20003d20
 8002e94:	20003d3c 	.word	0x20003d3c
 8002e98:	20003d68 	.word	0x20003d68

08002e9c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002e9c:	4a02      	ldr	r2, [pc, #8]	; (8002ea8 <vTaskSuspendAll+0xc>)
 8002e9e:	6813      	ldr	r3, [r2, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20003cec 	.word	0x20003cec

08002eac <xTaskIncrementTick>:
{
 8002eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eb0:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <xTaskIncrementTick+0xf8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d153      	bne.n	8002f60 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <xTaskIncrementTick+0xfc>)
 8002eba:	681c      	ldr	r4, [r3, #0]
 8002ebc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002ebe:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ec0:	b9bc      	cbnz	r4, 8002ef2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <xTaskIncrementTick+0x100>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	b142      	cbz	r2, 8002edc <xTaskIncrementTick+0x30>
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	e7fe      	b.n	8002eda <xTaskIncrementTick+0x2e>
 8002edc:	4a34      	ldr	r2, [pc, #208]	; (8002fb0 <xTaskIncrementTick+0x104>)
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	6810      	ldr	r0, [r2, #0]
 8002ee2:	6018      	str	r0, [r3, #0]
 8002ee4:	6011      	str	r1, [r2, #0]
 8002ee6:	4a33      	ldr	r2, [pc, #204]	; (8002fb4 <xTaskIncrementTick+0x108>)
 8002ee8:	6813      	ldr	r3, [r2, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	f7ff fe55 	bl	8002b9c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ef2:	4d31      	ldr	r5, [pc, #196]	; (8002fb8 <xTaskIncrementTick+0x10c>)
 8002ef4:	4f31      	ldr	r7, [pc, #196]	; (8002fbc <xTaskIncrementTick+0x110>)
 8002ef6:	682b      	ldr	r3, [r5, #0]
 8002ef8:	429c      	cmp	r4, r3
 8002efa:	f04f 0b00 	mov.w	fp, #0
 8002efe:	d33e      	bcc.n	8002f7e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f00:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002fac <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002f04:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002fcc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f08:	f8d8 2000 	ldr.w	r2, [r8]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	bb72      	cbnz	r2, 8002f6e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f14:	602a      	str	r2, [r5, #0]
					break;
 8002f16:	e032      	b.n	8002f7e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f18:	f106 0a04 	add.w	sl, r6, #4
 8002f1c:	4650      	mov	r0, sl
 8002f1e:	f7ff fb3f 	bl	80025a0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f22:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002f24:	b119      	cbz	r1, 8002f2e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f26:	f106 0018 	add.w	r0, r6, #24
 8002f2a:	f7ff fb39 	bl	80025a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f2e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002f30:	f8d9 3000 	ldr.w	r3, [r9]
 8002f34:	2201      	movs	r2, #1
 8002f36:	fa02 f100 	lsl.w	r1, r2, r0
 8002f3a:	4319      	orrs	r1, r3
 8002f3c:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <xTaskIncrementTick+0x114>)
 8002f3e:	f8c9 1000 	str.w	r1, [r9]
 8002f42:	f04f 0e14 	mov.w	lr, #20
 8002f46:	4651      	mov	r1, sl
 8002f48:	fb0e 3000 	mla	r0, lr, r0, r3
 8002f4c:	f7ff fb05 	bl	800255a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f50:	6838      	ldr	r0, [r7, #0]
 8002f52:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002f54:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002f56:	4291      	cmp	r1, r2
 8002f58:	bf28      	it	cs
 8002f5a:	f04f 0b01 	movcs.w	fp, #1
 8002f5e:	e7d3      	b.n	8002f08 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <xTaskIncrementTick+0x118>)
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002f68:	f04f 0b00 	mov.w	fp, #0
 8002f6c:	e011      	b.n	8002f92 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f6e:	f8d8 2000 	ldr.w	r2, [r8]
 8002f72:	68d2      	ldr	r2, [r2, #12]
 8002f74:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f76:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002f78:	428c      	cmp	r4, r1
 8002f7a:	d2cd      	bcs.n	8002f18 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002f7c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <xTaskIncrementTick+0x114>)
 8002f82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f84:	2214      	movs	r2, #20
 8002f86:	434a      	muls	r2, r1
 8002f88:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002f8a:	2a02      	cmp	r2, #2
 8002f8c:	bf28      	it	cs
 8002f8e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002f92:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <xTaskIncrementTick+0x11c>)
 8002f94:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002f96:	2a00      	cmp	r2, #0
 8002f98:	bf18      	it	ne
 8002f9a:	f04f 0b01 	movne.w	fp, #1
}
 8002f9e:	4658      	mov	r0, fp
 8002fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa4:	20003cec 	.word	0x20003cec
 8002fa8:	20003d68 	.word	0x20003d68
 8002fac:	20003c4c 	.word	0x20003c4c
 8002fb0:	20003c50 	.word	0x20003c50
 8002fb4:	20003d24 	.word	0x20003d24
 8002fb8:	20003d20 	.word	0x20003d20
 8002fbc:	20003c48 	.word	0x20003c48
 8002fc0:	20003c54 	.word	0x20003c54
 8002fc4:	20003ce8 	.word	0x20003ce8
 8002fc8:	20003d6c 	.word	0x20003d6c
 8002fcc:	20003cf4 	.word	0x20003cf4

08002fd0 <xTaskResumeAll>:
{
 8002fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002fd4:	4c31      	ldr	r4, [pc, #196]	; (800309c <xTaskResumeAll+0xcc>)
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	b943      	cbnz	r3, 8002fec <xTaskResumeAll+0x1c>
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	e7fe      	b.n	8002fea <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002fec:	f7ff fb52 	bl	8002694 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff6:	6824      	ldr	r4, [r4, #0]
 8002ff8:	b12c      	cbz	r4, 8003006 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002ffa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002ffc:	f7ff fb6c 	bl	80026d8 <vPortExitCritical>
}
 8003000:	4620      	mov	r0, r4
 8003002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <xTaskResumeAll+0xd0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f5      	beq.n	8002ffa <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800300e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80030b8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8003012:	4f24      	ldr	r7, [pc, #144]	; (80030a4 <xTaskResumeAll+0xd4>)
 8003014:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80030bc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003018:	f8d9 3000 	ldr.w	r3, [r9]
 800301c:	b9e3      	cbnz	r3, 8003058 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800301e:	b10c      	cbz	r4, 8003024 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8003020:	f7ff fdbc 	bl	8002b9c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003024:	4d20      	ldr	r5, [pc, #128]	; (80030a8 <xTaskResumeAll+0xd8>)
 8003026:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003028:	b144      	cbz	r4, 800303c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800302a:	4e20      	ldr	r6, [pc, #128]	; (80030ac <xTaskResumeAll+0xdc>)
 800302c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800302e:	f7ff ff3d 	bl	8002eac <xTaskIncrementTick>
 8003032:	b100      	cbz	r0, 8003036 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003034:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003036:	3c01      	subs	r4, #1
 8003038:	d1f9      	bne.n	800302e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800303a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <xTaskResumeAll+0xdc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0da      	beq.n	8002ffa <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003044:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <xTaskResumeAll+0xe0>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003054:	2401      	movs	r4, #1
 8003056:	e7d1      	b.n	8002ffc <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003058:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800305c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800305e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003060:	f104 0018 	add.w	r0, r4, #24
 8003064:	f7ff fa9c 	bl	80025a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003068:	4630      	mov	r0, r6
 800306a:	f7ff fa99 	bl	80025a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800306e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	2501      	movs	r5, #1
 8003074:	fa05 f302 	lsl.w	r3, r5, r2
 8003078:	2014      	movs	r0, #20
 800307a:	430b      	orrs	r3, r1
 800307c:	fb00 8002 	mla	r0, r0, r2, r8
 8003080:	4631      	mov	r1, r6
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	f7ff fa69 	bl	800255a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <xTaskResumeAll+0xe4>)
 800308a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003092:	bf24      	itt	cs
 8003094:	4b05      	ldrcs	r3, [pc, #20]	; (80030ac <xTaskResumeAll+0xdc>)
 8003096:	601d      	strcs	r5, [r3, #0]
 8003098:	e7be      	b.n	8003018 <xTaskResumeAll+0x48>
 800309a:	bf00      	nop
 800309c:	20003cec 	.word	0x20003cec
 80030a0:	20003ce0 	.word	0x20003ce0
 80030a4:	20003cf4 	.word	0x20003cf4
 80030a8:	20003ce8 	.word	0x20003ce8
 80030ac:	20003d6c 	.word	0x20003d6c
 80030b0:	e000ed04 	.word	0xe000ed04
 80030b4:	20003c48 	.word	0x20003c48
 80030b8:	20003d28 	.word	0x20003d28
 80030bc:	20003c54 	.word	0x20003c54

080030c0 <vTaskDelay>:
	{
 80030c0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030c2:	b940      	cbnz	r0, 80030d6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <vTaskDelay+0x40>)
 80030c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <vTaskDelay+0x44>)
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	b141      	cbz	r1, 80030ee <vTaskDelay+0x2e>
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	e7fe      	b.n	80030ec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80030ee:	f7ff fed5 	bl	8002e9c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030f2:	f7ff fdf3 	bl	8002cdc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80030f6:	f7ff ff6b 	bl	8002fd0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d0e2      	beq.n	80030c4 <vTaskDelay+0x4>
 80030fe:	bd08      	pop	{r3, pc}
 8003100:	e000ed04 	.word	0xe000ed04
 8003104:	20003cec 	.word	0x20003cec

08003108 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <vTaskSwitchContext+0x60>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b17      	ldr	r3, [pc, #92]	; (800316c <vTaskSwitchContext+0x64>)
{
 800310e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003110:	b112      	cbz	r2, 8003118 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003112:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003118:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <vTaskSwitchContext+0x68>)
 800311c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f1c3 031f 	rsb	r3, r3, #31
 8003128:	2214      	movs	r2, #20
 800312a:	4912      	ldr	r1, [pc, #72]	; (8003174 <vTaskSwitchContext+0x6c>)
 800312c:	435a      	muls	r2, r3
 800312e:	1888      	adds	r0, r1, r2
 8003130:	588c      	ldr	r4, [r1, r2]
 8003132:	b944      	cbnz	r4, 8003146 <vTaskSwitchContext+0x3e>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	e7fe      	b.n	8003144 <vTaskSwitchContext+0x3c>
 8003146:	6844      	ldr	r4, [r0, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	6864      	ldr	r4, [r4, #4]
 800314c:	6044      	str	r4, [r0, #4]
 800314e:	440a      	add	r2, r1
 8003150:	4294      	cmp	r4, r2
 8003152:	bf04      	itt	eq
 8003154:	6862      	ldreq	r2, [r4, #4]
 8003156:	6042      	streq	r2, [r0, #4]
 8003158:	2214      	movs	r2, #20
 800315a:	fb02 1303 	mla	r3, r2, r3, r1
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <vTaskSwitchContext+0x70>)
 8003164:	e7d6      	b.n	8003114 <vTaskSwitchContext+0xc>
 8003166:	bf00      	nop
 8003168:	20003cec 	.word	0x20003cec
 800316c:	20003d6c 	.word	0x20003d6c
 8003170:	20003cf4 	.word	0x20003cf4
 8003174:	20003c54 	.word	0x20003c54
 8003178:	20003c48 	.word	0x20003c48

0800317c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800317c:	b530      	push	{r4, r5, lr}
 800317e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003180:	2210      	movs	r2, #16
 8003182:	2100      	movs	r1, #0
 8003184:	4668      	mov	r0, sp
 8003186:	f000 fdb1 	bl	8003cec <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800318a:	4812      	ldr	r0, [pc, #72]	; (80031d4 <MX_ADC1_Init+0x58>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800318c:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <MX_ADC1_Init+0x5c>)
 800318e:	2400      	movs	r4, #0
 8003190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8003194:	2501      	movs	r5, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003196:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <MX_ADC1_Init+0x60>)
  hadc1.Init.ScanConvMode = DISABLE;
 800319c:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800319e:	7604      	strb	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031a0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031a4:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031a6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031a8:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031aa:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031ac:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031b0:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031b2:	f7fd f9e5 	bl	8000580 <HAL_ADC_Init>
 80031b6:	b108      	cbz	r0, 80031bc <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 80031b8:	f000 fb12 	bl	80037e0 <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031bc:	4669      	mov	r1, sp
 80031be:	4805      	ldr	r0, [pc, #20]	; (80031d4 <MX_ADC1_Init+0x58>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031c0:	9402      	str	r4, [sp, #8]
  sConfig.Rank = 1;
 80031c2:	e88d 0030 	stmia.w	sp, {r4, r5}
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031c6:	f7fd fa81 	bl	80006cc <HAL_ADC_ConfigChannel>
 80031ca:	b108      	cbz	r0, 80031d0 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 80031cc:	f000 fb08 	bl	80037e0 <Error_Handler>
  }

}
 80031d0:	b005      	add	sp, #20
 80031d2:	bd30      	pop	{r4, r5, pc}
 80031d4:	20003fc8 	.word	0x20003fc8
 80031d8:	40012000 	.word	0x40012000
 80031dc:	0f000001 	.word	0x0f000001

080031e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80031e0:	b510      	push	{r4, lr}
 80031e2:	4604      	mov	r4, r0
 80031e4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e6:	2214      	movs	r2, #20
 80031e8:	2100      	movs	r1, #0
 80031ea:	a803      	add	r0, sp, #12
 80031ec:	f000 fd7e 	bl	8003cec <memset>
  if(adcHandle->Instance==ADC1)
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_ADC_MspInit+0x5c>)
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d11e      	bne.n	8003236 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031f8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80031fc:	2100      	movs	r1, #0
 80031fe:	9101      	str	r1, [sp, #4]
 8003200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	480f      	ldr	r0, [pc, #60]	; (8003240 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
 800320a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800320c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003210:	9201      	str	r2, [sp, #4]
 8003212:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003214:	9102      	str	r1, [sp, #8]
 8003216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	9302      	str	r3, [sp, #8]
 8003226:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003228:	2301      	movs	r3, #1
 800322a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800322e:	2303      	movs	r3, #3
 8003230:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003232:	f7fd fd2b 	bl	8000c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003236:	b008      	add	sp, #32
 8003238:	bd10      	pop	{r4, pc}
 800323a:	bf00      	nop
 800323c:	40012000 	.word	0x40012000
 8003240:	40020000 	.word	0x40020000

08003244 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8003244:	b507      	push	{r0, r1, r2, lr}
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8003246:	4812      	ldr	r0, [pc, #72]	; (8003290 <MX_ETH_Init+0x4c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003248:	4a12      	ldr	r2, [pc, #72]	; (8003294 <MX_ETH_Init+0x50>)
  MACAddr[1] = 0x80;
  MACAddr[2] = 0xE1;
  MACAddr[3] = 0x00;
  MACAddr[4] = 0x00;
  MACAddr[5] = 0x00;
  heth.Init.MACAddr = &MACAddr[0];
 800324a:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800324e:	2301      	movs	r3, #1
 8003250:	e880 000c 	stmia.w	r0, {r2, r3}
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003254:	2300      	movs	r3, #0
  MACAddr[1] = 0x80;
 8003256:	2280      	movs	r2, #128	; 0x80
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003258:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 800325a:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 800325e:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[3] = 0x00;
 8003262:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[2] = 0xE1;
 8003266:	22e1      	movs	r2, #225	; 0xe1
  MACAddr[4] = 0x00;
 8003268:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 800326c:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003270:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003272:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003274:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  MACAddr[2] = 0xE1;
 8003278:	f88d 2002 	strb.w	r2, [sp, #2]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800327c:	6203      	str	r3, [r0, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800327e:	f7fd fc09 	bl	8000a94 <HAL_ETH_Init>
 8003282:	b108      	cbz	r0, 8003288 <MX_ETH_Init+0x44>
  {
    Error_Handler();
 8003284:	f000 faac 	bl	80037e0 <Error_Handler>
  }

}
 8003288:	b003      	add	sp, #12
 800328a:	f85d fb04 	ldr.w	pc, [sp], #4
 800328e:	bf00      	nop
 8003290:	20004010 	.word	0x20004010
 8003294:	40028000 	.word	0x40028000

08003298 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329a:	4604      	mov	r4, r0
 800329c:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329e:	2214      	movs	r2, #20
 80032a0:	2100      	movs	r1, #0
 80032a2:	a807      	add	r0, sp, #28
 80032a4:	f000 fd22 	bl	8003cec <memset>
  if(ethHandle->Instance==ETH)
 80032a8:	6822      	ldr	r2, [r4, #0]
 80032aa:	4b3d      	ldr	r3, [pc, #244]	; (80033a0 <HAL_ETH_MspInit+0x108>)
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d174      	bne.n	800339a <HAL_ETH_MspInit+0x102>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80032b0:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80032b4:	2400      	movs	r4, #0
 80032b6:	9400      	str	r4, [sp, #0]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ba:	483a      	ldr	r0, [pc, #232]	; (80033a4 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80032bc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
 80032c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032c4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80032c8:	9200      	str	r2, [sp, #0]
 80032ca:	9a00      	ldr	r2, [sp, #0]
 80032cc:	9401      	str	r4, [sp, #4]
 80032ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
 80032d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032d8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80032dc:	9201      	str	r2, [sp, #4]
 80032de:	9a01      	ldr	r2, [sp, #4]
 80032e0:	9402      	str	r4, [sp, #8]
 80032e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
 80032ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ec:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80032f0:	9202      	str	r2, [sp, #8]
 80032f2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f4:	9403      	str	r4, [sp, #12]
 80032f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f8:	f042 0204 	orr.w	r2, r2, #4
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
 80032fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003300:	f002 0204 	and.w	r2, r2, #4
 8003304:	9203      	str	r2, [sp, #12]
 8003306:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003308:	9404      	str	r4, [sp, #16]
 800330a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
 8003312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003314:	f002 0201 	and.w	r2, r2, #1
 8003318:	9204      	str	r2, [sp, #16]
 800331a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331c:	9405      	str	r4, [sp, #20]
 800331e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003320:	f042 0202 	orr.w	r2, r2, #2
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
 8003326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003328:	f002 0202 	and.w	r2, r2, #2
 800332c:	9205      	str	r2, [sp, #20]
 800332e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003330:	9406      	str	r4, [sp, #24]
 8003332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003344:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003346:	250b      	movs	r5, #11
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003348:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800334c:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003350:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003352:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003354:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003356:	f7fd fc99 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800335a:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335c:	a907      	add	r1, sp, #28
 800335e:	4812      	ldr	r0, [pc, #72]	; (80033a8 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003360:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003366:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003368:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	f7fd fc8f 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800336e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003372:	a907      	add	r1, sp, #28
 8003374:	480d      	ldr	r0, [pc, #52]	; (80033ac <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003376:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800337e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003380:	f7fd fc84 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003384:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003388:	a907      	add	r1, sp, #28
 800338a:	4809      	ldr	r0, [pc, #36]	; (80033b0 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800338c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003394:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003396:	f7fd fc79 	bl	8000c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800339a:	b00d      	add	sp, #52	; 0x34
 800339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800339e:	bf00      	nop
 80033a0:	40028000 	.word	0x40028000
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40021800 	.word	0x40021800

080033b4 <SecondTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SecondTask */
void SecondTask(void const * argument)
{
 80033b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033b8:	b089      	sub	sp, #36	; 0x24
	uint8_t secondes, heures, minutes, jours, date, mois, annees;

	//Décalage de 1 bit sur l'adresse slave
	int I2c_adress = 0b1101000<<1;

	aTxBuffer[0] = 0b00000000; // pointeur sur le début du registre RTC
 80033ba:	2300      	movs	r3, #0
 80033bc:	f88d 3008 	strb.w	r3, [sp, #8]
	aTxBuffer[1] = 0b00000000; // intitalisation de l'oscillateur
 80033c0:	f88d 3009 	strb.w	r3, [sp, #9]

	//Force Date/mois/Année
	aTxBuffer[5]= 0b00000100;
 80033c4:	2304      	movs	r3, #4
 80033c6:	f88d 300d 	strb.w	r3, [sp, #13]
	aTxBuffer[6]= 0b00000110;
 80033ca:	2306      	movs	r3, #6
 80033cc:	f88d 300e 	strb.w	r3, [sp, #14]
//	HAL_I2C_Master_Transmit(&hi2c1,I2c_adress, (uint8_t*)aTxBuffer, 8, 10000);

  /* Infinite loop */
  for(;;)
  {
	HAL_I2C_Master_Transmit(&hi2c1,I2c_adress, (uint8_t*)aTxBuffer, 1, 10000);
 80033d0:	4e30      	ldr	r6, [pc, #192]	; (8003494 <SecondTask+0xe0>)
	//application des mask sur les annees
	annees = ((aRxBuffer[6]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[6]&MASK_UNIT_HMSDMA);


	//affichage heures, minutes, secondes
	printf("%d/%d/%d\n",date , mois, annees);
 80033d2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800349c <SecondTask+0xe8>
	aTxBuffer[7]= 0b00011001;
 80033d6:	2319      	movs	r3, #25
 80033d8:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_I2C_Master_Transmit(&hi2c1,I2c_adress, (uint8_t*)aTxBuffer, 1, 10000);
 80033dc:	f242 7410 	movw	r4, #10000	; 0x2710
 80033e0:	9400      	str	r4, [sp, #0]
 80033e2:	aa02      	add	r2, sp, #8
 80033e4:	2301      	movs	r3, #1
 80033e6:	21d0      	movs	r1, #208	; 0xd0
 80033e8:	4630      	mov	r0, r6
 80033ea:	f7fd fef1 	bl	80011d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, I2c_adress, (uint8_t*)aRxBuffer, 7, 10000);
 80033ee:	9400      	str	r4, [sp, #0]
 80033f0:	aa05      	add	r2, sp, #20
 80033f2:	2307      	movs	r3, #7
 80033f4:	21d0      	movs	r1, #208	; 0xd0
 80033f6:	4630      	mov	r0, r6
 80033f8:	f7fd ffb8 	bl	800136c <HAL_I2C_Master_Receive>
	mois = ((aRxBuffer[5]&MASK_DIZ_MOIS)>>4) *10 +(aRxBuffer[5]&MASK_UNIT_HMSDMA);
 80033fc:	f89d e019 	ldrb.w	lr, [sp, #25]
	date = ((aRxBuffer[4]&MASK_DIZ_DATE)>>4) *10 +(aRxBuffer[4]&MASK_UNIT_HMSDMA);
 8003400:	f89d 0018 	ldrb.w	r0, [sp, #24]
	annees = ((aRxBuffer[6]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[6]&MASK_UNIT_HMSDMA);
 8003404:	f89d c01a 	ldrb.w	ip, [sp, #26]
	secondes = ((aRxBuffer[0]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[0]&MASK_UNIT_HMSDMA);
 8003408:	f89d 4014 	ldrb.w	r4, [sp, #20]
	minutes = ((aRxBuffer[1]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[1]&MASK_UNIT_HMSDMA);
 800340c:	f89d 9015 	ldrb.w	r9, [sp, #21]
	heures = ((aRxBuffer[2]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[2]&MASK_UNIT_HMSDMA);
 8003410:	f89d 5016 	ldrb.w	r5, [sp, #22]
	jours = aRxBuffer[3];
 8003414:	f89d 7017 	ldrb.w	r7, [sp, #23]
	mois = ((aRxBuffer[5]&MASK_DIZ_MOIS)>>4) *10 +(aRxBuffer[5]&MASK_UNIT_HMSDMA);
 8003418:	f3ce 1200 	ubfx	r2, lr, #4, #1
 800341c:	0091      	lsls	r1, r2, #2
	annees = ((aRxBuffer[6]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[6]&MASK_UNIT_HMSDMA);
 800341e:	f3cc 1302 	ubfx	r3, ip, #4, #3
	mois = ((aRxBuffer[5]&MASK_DIZ_MOIS)>>4) *10 +(aRxBuffer[5]&MASK_UNIT_HMSDMA);
 8003422:	440a      	add	r2, r1
	date = ((aRxBuffer[4]&MASK_DIZ_DATE)>>4) *10 +(aRxBuffer[4]&MASK_UNIT_HMSDMA);
 8003424:	f3c0 1101 	ubfx	r1, r0, #4, #2
	annees = ((aRxBuffer[6]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[6]&MASK_UNIT_HMSDMA);
 8003428:	f00c 0c0f 	and.w	ip, ip, #15
	mois = ((aRxBuffer[5]&MASK_DIZ_MOIS)>>4) *10 +(aRxBuffer[5]&MASK_UNIT_HMSDMA);
 800342c:	f00e 0e0f 	and.w	lr, lr, #15
	date = ((aRxBuffer[4]&MASK_DIZ_DATE)>>4) *10 +(aRxBuffer[4]&MASK_UNIT_HMSDMA);
 8003430:	f000 000f 	and.w	r0, r0, #15
	annees = ((aRxBuffer[6]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[6]&MASK_UNIT_HMSDMA);
 8003434:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	date = ((aRxBuffer[4]&MASK_DIZ_DATE)>>4) *10 +(aRxBuffer[4]&MASK_UNIT_HMSDMA);
 8003438:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	printf("%d/%d/%d\n",date , mois, annees);
 800343c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8003440:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8003444:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8003448:	4640      	mov	r0, r8
 800344a:	f000 fb10 	bl	8003a6e <iprintf>
	secondes = ((aRxBuffer[0]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[0]&MASK_UNIT_HMSDMA);
 800344e:	f3c4 1002 	ubfx	r0, r4, #4, #3
	minutes = ((aRxBuffer[1]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[1]&MASK_UNIT_HMSDMA);
 8003452:	f3c9 1302 	ubfx	r3, r9, #4, #3
	heures = ((aRxBuffer[2]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[2]&MASK_UNIT_HMSDMA);
 8003456:	f3c5 1202 	ubfx	r2, r5, #4, #3
	secondes = ((aRxBuffer[0]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[0]&MASK_UNIT_HMSDMA);
 800345a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800345e:	f004 040f 	and.w	r4, r4, #15
	printf("%dJ, %dH, %dM, %dS\n",jours, heures, minutes, secondes);
 8003462:	eb04 0440 	add.w	r4, r4, r0, lsl #1
	minutes = ((aRxBuffer[1]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[1]&MASK_UNIT_HMSDMA);
 8003466:	f009 090f 	and.w	r9, r9, #15
	heures = ((aRxBuffer[2]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[2]&MASK_UNIT_HMSDMA);
 800346a:	f005 050f 	and.w	r5, r5, #15
	minutes = ((aRxBuffer[1]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[1]&MASK_UNIT_HMSDMA);
 800346e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	heures = ((aRxBuffer[2]&MASK_DIZ_HMSA)>>4) *10 +(aRxBuffer[2]&MASK_UNIT_HMSDMA);
 8003472:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	printf("%dJ, %dH, %dM, %dS\n",jours, heures, minutes, secondes);
 8003476:	9400      	str	r4, [sp, #0]
 8003478:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 800347c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8003480:	4639      	mov	r1, r7
 8003482:	4805      	ldr	r0, [pc, #20]	; (8003498 <SecondTask+0xe4>)
 8003484:	f000 faf3 	bl	8003a6e <iprintf>
    osDelay(1000);
 8003488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800348c:	f7ff f84f 	bl	800252e <osDelay>
 8003490:	e7a4      	b.n	80033dc <SecondTask+0x28>
 8003492:	bf00      	nop
 8003494:	20004060 	.word	0x20004060
 8003498:	08003d3f 	.word	0x08003d3f
 800349c:	08003d35 	.word	0x08003d35

080034a0 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <vApplicationGetIdleTaskMemory+0x10>)
 80034a2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <vApplicationGetIdleTaskMemory+0x14>)
 80034a6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20003f70 	.word	0x20003f70
 80034b4:	20003d70 	.word	0x20003d70

080034b8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80034b8:	b530      	push	{r4, r5, lr}
  osThreadDef(myTask02, SecondTask, osPriorityIdle, 0, 128);
 80034ba:	4d08      	ldr	r5, [pc, #32]	; (80034dc <MX_FREERTOS_Init+0x24>)
 80034bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 80034be:	b089      	sub	sp, #36	; 0x24
  osThreadDef(myTask02, SecondTask, osPriorityIdle, 0, 128);
 80034c0:	ac01      	add	r4, sp, #4
 80034c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80034cc:	2100      	movs	r1, #0
 80034ce:	a801      	add	r0, sp, #4
 80034d0:	f7ff f805 	bl	80024de <osThreadCreate>
 80034d4:	4b02      	ldr	r3, [pc, #8]	; (80034e0 <MX_FREERTOS_Init+0x28>)
 80034d6:	6018      	str	r0, [r3, #0]
}
 80034d8:	b009      	add	sp, #36	; 0x24
 80034da:	bd30      	pop	{r4, r5, pc}
 80034dc:	08003d14 	.word	0x08003d14
 80034e0:	2000405c 	.word	0x2000405c

080034e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e6:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	2214      	movs	r2, #20
 80034ea:	2100      	movs	r1, #0
 80034ec:	a807      	add	r0, sp, #28
 80034ee:	f000 fbfd 	bl	8003cec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f2:	2400      	movs	r4, #0
 80034f4:	4b3d      	ldr	r3, [pc, #244]	; (80035ec <MX_GPIO_Init+0x108>)
 80034f6:	9401      	str	r4, [sp, #4]
 80034f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80034fa:	4f3d      	ldr	r7, [pc, #244]	; (80035f0 <MX_GPIO_Init+0x10c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80034fc:	4d3d      	ldr	r5, [pc, #244]	; (80035f4 <MX_GPIO_Init+0x110>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034fe:	f042 0204 	orr.w	r2, r2, #4
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
 8003504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003506:	f002 0204 	and.w	r2, r2, #4
 800350a:	9201      	str	r2, [sp, #4]
 800350c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800350e:	9402      	str	r4, [sp, #8]
 8003510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
 8003518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800351e:	9202      	str	r2, [sp, #8]
 8003520:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003522:	9403      	str	r4, [sp, #12]
 8003524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
 800352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352e:	f002 0201 	and.w	r2, r2, #1
 8003532:	9203      	str	r2, [sp, #12]
 8003534:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	9404      	str	r4, [sp, #16]
 8003538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353a:	f042 0202 	orr.w	r2, r2, #2
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
 8003540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003542:	f002 0202 	and.w	r2, r2, #2
 8003546:	9204      	str	r2, [sp, #16]
 8003548:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800354a:	9405      	str	r4, [sp, #20]
 800354c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
 8003554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003556:	f002 0208 	and.w	r2, r2, #8
 800355a:	9205      	str	r2, [sp, #20]
 800355c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800355e:	9406      	str	r4, [sp, #24]
 8003560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003570:	4622      	mov	r2, r4
 8003572:	4638      	mov	r0, r7
 8003574:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003578:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800357a:	f7fd fc73 	bl	8000e64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800357e:	4622      	mov	r2, r4
 8003580:	4628      	mov	r0, r5
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	f7fd fc6e 	bl	8000e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800358c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800358e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <MX_GPIO_Init+0x114>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003592:	481a      	ldr	r0, [pc, #104]	; (80035fc <MX_GPIO_Init+0x118>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003594:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003598:	f7fd fb78 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800359c:	2308      	movs	r3, #8
 800359e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a4:	4816      	ldr	r0, [pc, #88]	; (8003600 <MX_GPIO_Init+0x11c>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a6:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ac:	f7fd fb6e 	bl	8000c8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80035b0:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b4:	a907      	add	r1, sp, #28
 80035b6:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80035b8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ba:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035be:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	f7fd fb64 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80035c4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035c6:	a907      	add	r1, sp, #28
 80035c8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80035ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035cc:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f7fd fb5b 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80035d6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80035d8:	a907      	add	r1, sp, #28
 80035da:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80035dc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035de:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80035e2:	f7fd fb53 	bl	8000c8c <HAL_GPIO_Init>

}
 80035e6:	b00d      	add	sp, #52	; 0x34
 80035e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020400 	.word	0x40020400
 80035f4:	40021800 	.word	0x40021800
 80035f8:	10110000 	.word	0x10110000
 80035fc:	40020800 	.word	0x40020800
 8003600:	40020000 	.word	0x40020000

08003604 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003604:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003606:	4813      	ldr	r0, [pc, #76]	; (8003654 <MX_I2C1_Init+0x50>)
  hi2c1.Init.ClockSpeed = 100000;
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <MX_I2C1_Init+0x54>)
 800360a:	f8df e050 	ldr.w	lr, [pc, #80]	; 800365c <MX_I2C1_Init+0x58>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800360e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8003612:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003616:	2300      	movs	r3, #0
 8003618:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800361a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800361c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800361e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003620:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003622:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003624:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003626:	f7fd fd2f 	bl	8001088 <HAL_I2C_Init>
 800362a:	b108      	cbz	r0, 8003630 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 800362c:	f000 f8d8 	bl	80037e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003630:	2100      	movs	r1, #0
 8003632:	4808      	ldr	r0, [pc, #32]	; (8003654 <MX_I2C1_Init+0x50>)
 8003634:	f7fe f808 	bl	8001648 <HAL_I2CEx_ConfigAnalogFilter>
 8003638:	b108      	cbz	r0, 800363e <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
 800363a:	f000 f8d1 	bl	80037e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800363e:	2100      	movs	r1, #0
 8003640:	4804      	ldr	r0, [pc, #16]	; (8003654 <MX_I2C1_Init+0x50>)
 8003642:	f7fe f820 	bl	8001686 <HAL_I2CEx_ConfigDigitalFilter>
 8003646:	b118      	cbz	r0, 8003650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
  }

}
 8003648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800364c:	f000 b8c8 	b.w	80037e0 <Error_Handler>
 8003650:	bd08      	pop	{r3, pc}
 8003652:	bf00      	nop
 8003654:	20004060 	.word	0x20004060
 8003658:	40005400 	.word	0x40005400
 800365c:	000186a0 	.word	0x000186a0

08003660 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003660:	b530      	push	{r4, r5, lr}
 8003662:	4604      	mov	r4, r0
 8003664:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003666:	2214      	movs	r2, #20
 8003668:	2100      	movs	r1, #0
 800366a:	a803      	add	r0, sp, #12
 800366c:	f000 fb3e 	bl	8003cec <memset>
  if(i2cHandle->Instance==I2C1)
 8003670:	6822      	ldr	r2, [r4, #0]
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <HAL_I2C_MspInit+0x68>)
 8003674:	429a      	cmp	r2, r3
 8003676:	d124      	bne.n	80036c2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003678:	4c14      	ldr	r4, [pc, #80]	; (80036cc <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367a:	4815      	ldr	r0, [pc, #84]	; (80036d0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367c:	2500      	movs	r5, #0
 800367e:	9501      	str	r5, [sp, #4]
 8003680:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	6323      	str	r3, [r4, #48]	; 0x30
 8003688:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003696:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003698:	2312      	movs	r3, #18
 800369a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800369c:	2301      	movs	r3, #1
 800369e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a0:	2303      	movs	r3, #3
 80036a2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036a6:	2304      	movs	r3, #4
 80036a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036aa:	f7fd faef 	bl	8000c8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036ae:	9502      	str	r5, [sp, #8]
 80036b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036b6:	6423      	str	r3, [r4, #64]	; 0x40
 80036b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036c2:	b009      	add	sp, #36	; 0x24
 80036c4:	bd30      	pop	{r4, r5, pc}
 80036c6:	bf00      	nop
 80036c8:	40005400 	.word	0x40005400
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020400 	.word	0x40020400

080036d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036d4:	b530      	push	{r4, r5, lr}
 80036d6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036d8:	2230      	movs	r2, #48	; 0x30
 80036da:	2100      	movs	r1, #0
 80036dc:	a808      	add	r0, sp, #32
 80036de:	f000 fb05 	bl	8003cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036e2:	2100      	movs	r1, #0
 80036e4:	2214      	movs	r2, #20
 80036e6:	a803      	add	r0, sp, #12
 80036e8:	f000 fb00 	bl	8003cec <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ec:	2400      	movs	r4, #0
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <SystemClock_Config+0x90>)
 80036f0:	9401      	str	r4, [sp, #4]
 80036f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <SystemClock_Config+0x94>)
 8003706:	9402      	str	r4, [sp, #8]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003716:	9302      	str	r3, [sp, #8]
 8003718:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800371a:	2301      	movs	r3, #1
 800371c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800371e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003722:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003724:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003728:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800372a:	2304      	movs	r3, #4
 800372c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800372e:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003730:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003732:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003734:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003736:	2307      	movs	r3, #7
 8003738:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800373a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800373c:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800373e:	f7fe f849 	bl	80017d4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003742:	230f      	movs	r3, #15
 8003744:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003746:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800374a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800374c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800374e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003752:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003754:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003756:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003758:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800375a:	f7fe f9eb 	bl	8001b34 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800375e:	b015      	add	sp, #84	; 0x54
 8003760:	bd30      	pop	{r4, r5, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	40007000 	.word	0x40007000

0800376c <main>:
{
 800376c:	b508      	push	{r3, lr}
  HAL_Init();
 800376e:	f7fc fec7 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 8003772:	f7ff ffaf 	bl	80036d4 <SystemClock_Config>
  MX_GPIO_Init();
 8003776:	f7ff feb5 	bl	80034e4 <MX_GPIO_Init>
  MX_ETH_Init();
 800377a:	f7ff fd63 	bl	8003244 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800377e:	f000 f9b5 	bl	8003aec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003782:	f000 fa07 	bl	8003b94 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8003786:	f7ff fcf9 	bl	800317c <MX_ADC1_Init>
  MX_I2C1_Init();
 800378a:	f7ff ff3b 	bl	8003604 <MX_I2C1_Init>
  MX_FREERTOS_Init();
 800378e:	f7ff fe93 	bl	80034b8 <MX_FREERTOS_Init>
  osKernelStart();
 8003792:	f7fe fe9f 	bl	80024d4 <osKernelStart>
 8003796:	e7fe      	b.n	8003796 <main+0x2a>

08003798 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)// the new function for SWV output
{
 8003798:	b510      	push	{r4, lr}
	int i=0;
	for(i=0; i<len; i++)
 800379a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800379c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80037a0:	4293      	cmp	r3, r2
 80037a2:	db01      	blt.n	80037a8 <_write+0x10>
	ITM_SendChar((*ptr++)); // out char to serial
	return len;
}
 80037a4:	4610      	mov	r0, r2
 80037a6:	bd10      	pop	{r4, pc}
 80037a8:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 80037ac:	07c0      	lsls	r0, r0, #31
 80037ae:	d503      	bpl.n	80037b8 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80037b0:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80037b4:	07c0      	lsls	r0, r0, #31
 80037b6:	d402      	bmi.n	80037be <_write+0x26>
	for(i=0; i<len; i++)
 80037b8:	3301      	adds	r3, #1
 80037ba:	e7f1      	b.n	80037a0 <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80037bc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d0fb      	beq.n	80037bc <_write+0x24>
	ITM_SendChar((*ptr++)); // out char to serial
 80037c4:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80037c6:	7020      	strb	r0, [r4, #0]
 80037c8:	e7f6      	b.n	80037b8 <_write+0x20>
	...

080037cc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 80037cc:	6802      	ldr	r2, [r0, #0]
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d101      	bne.n	80037d8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80037d4:	f7fc beae 	b.w	8000534 <HAL_IncTick>
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40010400 	.word	0x40010400

080037e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037e0:	4770      	bx	lr

080037e2 <malloc>:
 r_2009/freertos_malloc_function_in_FreeRTOS_3444349.html */
/* Defining malloc/free should overwrite the standard versions
 provided by the compiler. */
void *malloc(size_t size) {
	/* Call the FreeRTOS version of malloc. */
	return pvPortMalloc(size);
 80037e2:	f7ff b899 	b.w	8002918 <pvPortMalloc>

080037e6 <free>:
	/* Call the FreeRTOS version of calloc. */
	void * p = pvPortMalloc(size);
	return memset(p, 0, size);
}
void free(void *ptr) { /* Call the FreeRTOS version of free.*/
	vPortFree(ptr);
 80037e6:	f7ff b925 	b.w	8002a34 <vPortFree>
	...

080037ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ec:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <HAL_MspInit+0x40>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	9200      	str	r2, [sp, #0]
 80037f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80037f6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80037fa:	6459      	str	r1, [r3, #68]	; 0x44
 80037fc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80037fe:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003802:	9100      	str	r1, [sp, #0]
 8003804:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	9201      	str	r2, [sp, #4]
 8003808:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800380a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800380e:	6419      	str	r1, [r3, #64]	; 0x40
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003818:	210f      	movs	r1, #15
 800381a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003820:	f7fd f808 	bl	8000834 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003824:	b003      	add	sp, #12
 8003826:	f85d fb04 	ldr.w	pc, [sp], #4
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003830:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8003832:	4601      	mov	r1, r0
{
 8003834:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8003836:	2200      	movs	r2, #0
 8003838:	202c      	movs	r0, #44	; 0x2c
 800383a:	f7fc fffb 	bl	8000834 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 800383e:	202c      	movs	r0, #44	; 0x2c
 8003840:	f7fd f82c 	bl	800089c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8003844:	2500      	movs	r5, #0
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_InitTick+0x6c>)
 8003848:	9502      	str	r5, [sp, #8]
 800384a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 800384c:	4c14      	ldr	r4, [pc, #80]	; (80038a0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM8_CLK_ENABLE();
 800384e:	f042 0202 	orr.w	r2, r2, #2
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800385c:	a901      	add	r1, sp, #4
 800385e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM8_CLK_ENABLE();
 8003860:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003862:	f7fe fa27 	bl	8001cb4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003866:	f7fe fa15 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
  htim8.Instance = TIM8;
 800386a:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <HAL_InitTick+0x74>)
 800386c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 800386e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003872:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003874:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_InitTick+0x78>)
 8003878:	fbb0 f0f3 	udiv	r0, r0, r3
 800387c:	3801      	subs	r0, #1
  htim8.Init.Prescaler = uwPrescalerValue;
 800387e:	6060      	str	r0, [r4, #4]
  htim8.Init.ClockDivision = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8003880:	4620      	mov	r0, r4
  htim8.Init.ClockDivision = 0;
 8003882:	6125      	str	r5, [r4, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003884:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8003886:	f7fe fb51 	bl	8001f2c <HAL_TIM_Base_Init>
 800388a:	b920      	cbnz	r0, 8003896 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 800388c:	4620      	mov	r0, r4
 800388e:	f7fe fa30 	bl	8001cf2 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003892:	b009      	add	sp, #36	; 0x24
 8003894:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8003896:	2001      	movs	r0, #1
 8003898:	e7fb      	b.n	8003892 <HAL_InitTick+0x62>
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	200040b4 	.word	0x200040b4
 80038a4:	40010400 	.word	0x40010400
 80038a8:	000f4240 	.word	0x000f4240

080038ac <NMI_Handler>:
 80038ac:	4770      	bx	lr

080038ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ae:	e7fe      	b.n	80038ae <HardFault_Handler>

080038b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b0:	e7fe      	b.n	80038b0 <MemManage_Handler>

080038b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b2:	e7fe      	b.n	80038b2 <BusFault_Handler>

080038b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b4:	e7fe      	b.n	80038b4 <UsageFault_Handler>

080038b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038b6:	4770      	bx	lr

080038b8 <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <TIM8_UP_TIM13_IRQHandler+0x8>)
 80038ba:	f7fe ba2e 	b.w	8001d1a <HAL_TIM_IRQHandler>
 80038be:	bf00      	nop
 80038c0:	200040b4 	.word	0x200040b4

080038c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <SystemInit+0x40>)
 80038c6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80038ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <SystemInit+0x44>)
 80038d4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038d6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80038de:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80038e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038ea:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80038ec:	4a07      	ldr	r2, [pc, #28]	; (800390c <SystemInit+0x48>)
 80038ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038f6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038f8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038fe:	608b      	str	r3, [r1, #8]
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000ed00 	.word	0xe000ed00
 8003908:	40023800 	.word	0x40023800
 800390c:	24003010 	.word	0x24003010

08003910 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003910:	b570      	push	{r4, r5, r6, lr}
	int div = 1;
 8003912:	2301      	movs	r3, #1
	while (d/div >= base)
 8003914:	fbb1 f4f3 	udiv	r4, r1, r3
 8003918:	4294      	cmp	r4, r2
 800391a:	d201      	bcs.n	8003920 <ts_itoa+0x10>
		div *= base;

	while (div != 0)
 800391c:	b913      	cbnz	r3, 8003924 <ts_itoa+0x14>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800391e:	bd70      	pop	{r4, r5, r6, pc}
		div *= base;
 8003920:	4353      	muls	r3, r2
 8003922:	e7f7      	b.n	8003914 <ts_itoa+0x4>
 8003924:	6805      	ldr	r5, [r0, #0]
		int num = d/div;
 8003926:	fbb1 f4f3 	udiv	r4, r1, r3
		if (num > 9)
 800392a:	2c09      	cmp	r4, #9
		d = d%div;
 800392c:	fb03 1114 	mls	r1, r3, r4, r1
			*((*buf)++) = (num-10) + 'A';
 8003930:	f105 0601 	add.w	r6, r5, #1
 8003934:	bfcc      	ite	gt
 8003936:	3437      	addgt	r4, #55	; 0x37
			*((*buf)++) = num + '0';
 8003938:	3430      	addle	r4, #48	; 0x30
			*((*buf)++) = (num-10) + 'A';
 800393a:	6006      	str	r6, [r0, #0]
		div /= base;
 800393c:	fb93 f3f2 	sdiv	r3, r3, r2
			*((*buf)++) = num + '0';
 8003940:	702c      	strb	r4, [r5, #0]
 8003942:	e7eb      	b.n	800391c <ts_itoa+0xc>

08003944 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003948:	ad02      	add	r5, sp, #8
 800394a:	460c      	mov	r4, r1
 800394c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8003950:	4613      	mov	r3, r2
	char *start_buf = buf;
 8003952:	4606      	mov	r6, r0
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 8003954:	272d      	movs	r7, #45	; 0x2d
	while(*fmt)
 8003956:	7822      	ldrb	r2, [r4, #0]
 8003958:	b932      	cbnz	r2, 8003968 <ts_formatstring+0x24>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800395a:	9b01      	ldr	r3, [sp, #4]
 800395c:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800395e:	9801      	ldr	r0, [sp, #4]
 8003960:	1b80      	subs	r0, r0, r6
 8003962:	b002      	add	sp, #8
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*fmt == '%')
 8003968:	2a25      	cmp	r2, #37	; 0x25
 800396a:	d146      	bne.n	80039fa <ts_formatstring+0xb6>
			switch (*(++fmt))
 800396c:	7862      	ldrb	r2, [r4, #1]
 800396e:	2a64      	cmp	r2, #100	; 0x64
 8003970:	d021      	beq.n	80039b6 <ts_formatstring+0x72>
 8003972:	d80a      	bhi.n	800398a <ts_formatstring+0x46>
 8003974:	2a58      	cmp	r2, #88	; 0x58
 8003976:	d013      	beq.n	80039a0 <ts_formatstring+0x5c>
 8003978:	2a63      	cmp	r2, #99	; 0x63
 800397a:	d015      	beq.n	80039a8 <ts_formatstring+0x64>
 800397c:	2a25      	cmp	r2, #37	; 0x25
 800397e:	d109      	bne.n	8003994 <ts_formatstring+0x50>
				  *buf++ = '%';
 8003980:	9901      	ldr	r1, [sp, #4]
 8003982:	1c48      	adds	r0, r1, #1
 8003984:	9001      	str	r0, [sp, #4]
 8003986:	700a      	strb	r2, [r1, #0]
				  break;
 8003988:	e004      	b.n	8003994 <ts_formatstring+0x50>
			switch (*(++fmt))
 800398a:	2a73      	cmp	r2, #115	; 0x73
 800398c:	d023      	beq.n	80039d6 <ts_formatstring+0x92>
 800398e:	d803      	bhi.n	8003998 <ts_formatstring+0x54>
 8003990:	2a69      	cmp	r2, #105	; 0x69
 8003992:	d010      	beq.n	80039b6 <ts_formatstring+0x72>
			fmt++;
 8003994:	3402      	adds	r4, #2
 8003996:	e7de      	b.n	8003956 <ts_formatstring+0x12>
			switch (*(++fmt))
 8003998:	2a75      	cmp	r2, #117	; 0x75
 800399a:	d029      	beq.n	80039f0 <ts_formatstring+0xac>
 800399c:	2a78      	cmp	r2, #120	; 0x78
 800399e:	d1f9      	bne.n	8003994 <ts_formatstring+0x50>
					ts_itoa(&buf, va_arg(va, int), 16);
 80039a0:	f103 0804 	add.w	r8, r3, #4
 80039a4:	2210      	movs	r2, #16
 80039a6:	e026      	b.n	80039f6 <ts_formatstring+0xb2>
				*buf++ = va_arg(va, int);
 80039a8:	9a01      	ldr	r2, [sp, #4]
 80039aa:	1c51      	adds	r1, r2, #1
 80039ac:	9101      	str	r1, [sp, #4]
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	7011      	strb	r1, [r2, #0]
 80039b2:	3304      	adds	r3, #4
				break;
 80039b4:	e7ee      	b.n	8003994 <ts_formatstring+0x50>
					signed int val = va_arg(va, signed int);
 80039b6:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 80039b8:	2900      	cmp	r1, #0
					signed int val = va_arg(va, signed int);
 80039ba:	f103 0804 	add.w	r8, r3, #4
					if (val < 0)
 80039be:	da04      	bge.n	80039ca <ts_formatstring+0x86>
						*buf++ = '-';
 80039c0:	9b01      	ldr	r3, [sp, #4]
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	9201      	str	r2, [sp, #4]
						val *= -1;
 80039c6:	4249      	negs	r1, r1
						*buf++ = '-';
 80039c8:	701f      	strb	r7, [r3, #0]
					ts_itoa(&buf, val, 10);
 80039ca:	220a      	movs	r2, #10
					ts_itoa(&buf, va_arg(va, int), 16);
 80039cc:	4628      	mov	r0, r5
 80039ce:	f7ff ff9f 	bl	8003910 <ts_itoa>
 80039d2:	4643      	mov	r3, r8
				break;
 80039d4:	e7de      	b.n	8003994 <ts_formatstring+0x50>
					char * arg = va_arg(va, char *);
 80039d6:	1d19      	adds	r1, r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	b90a      	cbnz	r2, 80039e2 <ts_formatstring+0x9e>
					char * arg = va_arg(va, char *);
 80039de:	460b      	mov	r3, r1
 80039e0:	e7d8      	b.n	8003994 <ts_formatstring+0x50>
						*buf++ = *arg++;
 80039e2:	9a01      	ldr	r2, [sp, #4]
 80039e4:	1c50      	adds	r0, r2, #1
 80039e6:	9001      	str	r0, [sp, #4]
 80039e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80039ec:	7010      	strb	r0, [r2, #0]
 80039ee:	e7f4      	b.n	80039da <ts_formatstring+0x96>
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80039f0:	f103 0804 	add.w	r8, r3, #4
 80039f4:	220a      	movs	r2, #10
					ts_itoa(&buf, va_arg(va, int), 16);
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	e7e8      	b.n	80039cc <ts_formatstring+0x88>
			*buf++ = *fmt++;
 80039fa:	9901      	ldr	r1, [sp, #4]
 80039fc:	1c48      	adds	r0, r1, #1
 80039fe:	9001      	str	r0, [sp, #4]
 8003a00:	3401      	adds	r4, #1
 8003a02:	700a      	strb	r2, [r1, #0]
 8003a04:	e7a7      	b.n	8003956 <ts_formatstring+0x12>

08003a06 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003a06:	b530      	push	{r4, r5, lr}
 8003a08:	4602      	mov	r2, r0
	int length = 0;
 8003a0a:	2000      	movs	r0, #0
	while (*fmt)
 8003a0c:	7813      	ldrb	r3, [r2, #0]
 8003a0e:	b903      	cbnz	r3, 8003a12 <ts_formatlength+0xc>
			++length;
		}
		++fmt;
	}
	return length;
}
 8003a10:	bd30      	pop	{r4, r5, pc}
		if (*fmt == '%')
 8003a12:	2b25      	cmp	r3, #37	; 0x25
 8003a14:	d128      	bne.n	8003a68 <ts_formatlength+0x62>
			switch (*fmt)
 8003a16:	7853      	ldrb	r3, [r2, #1]
 8003a18:	2b69      	cmp	r3, #105	; 0x69
			++fmt;
 8003a1a:	f102 0401 	add.w	r4, r2, #1
			switch (*fmt)
 8003a1e:	d013      	beq.n	8003a48 <ts_formatlength+0x42>
 8003a20:	d808      	bhi.n	8003a34 <ts_formatlength+0x2e>
 8003a22:	2b63      	cmp	r3, #99	; 0x63
 8003a24:	d00e      	beq.n	8003a44 <ts_formatlength+0x3e>
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d00e      	beq.n	8003a48 <ts_formatlength+0x42>
 8003a2a:	2b58      	cmp	r3, #88	; 0x58
 8003a2c:	d108      	bne.n	8003a40 <ts_formatlength+0x3a>
				  length += 8;
 8003a2e:	f100 0308 	add.w	r3, r0, #8
 8003a32:	e00b      	b.n	8003a4c <ts_formatlength+0x46>
			switch (*fmt)
 8003a34:	2b75      	cmp	r3, #117	; 0x75
 8003a36:	d007      	beq.n	8003a48 <ts_formatlength+0x42>
 8003a38:	2b78      	cmp	r3, #120	; 0x78
 8003a3a:	d0f8      	beq.n	8003a2e <ts_formatlength+0x28>
 8003a3c:	2b73      	cmp	r3, #115	; 0x73
 8003a3e:	d007      	beq.n	8003a50 <ts_formatlength+0x4a>
				  ++length;
 8003a40:	1c43      	adds	r3, r0, #1
				  break;
 8003a42:	e00e      	b.n	8003a62 <ts_formatlength+0x5c>
		  		  va_arg(va, int);
 8003a44:	3104      	adds	r1, #4
 8003a46:	e7fb      	b.n	8003a40 <ts_formatlength+0x3a>
				  length += 11;
 8003a48:	f100 030b 	add.w	r3, r0, #11
				  va_arg(va, unsigned int);
 8003a4c:	3104      	adds	r1, #4
 8003a4e:	e008      	b.n	8003a62 <ts_formatlength+0x5c>
			  		  char * str = va_arg(va, char *);
 8003a50:	680a      	ldr	r2, [r1, #0]
 8003a52:	1d0d      	adds	r5, r1, #4
 8003a54:	1a80      	subs	r0, r0, r2
 8003a56:	1813      	adds	r3, r2, r0
			  		  while (*str++)
 8003a58:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003a5c:	2900      	cmp	r1, #0
 8003a5e:	d1fa      	bne.n	8003a56 <ts_formatlength+0x50>
			  		  char * str = va_arg(va, char *);
 8003a60:	4629      	mov	r1, r5
		++fmt;
 8003a62:	1c62      	adds	r2, r4, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	e7d1      	b.n	8003a0c <ts_formatlength+0x6>
			++length;
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	4614      	mov	r4, r2
 8003a6c:	e7f9      	b.n	8003a62 <ts_formatlength+0x5c>

08003a6e <iprintf>:
**            standard output according to the format parameter.
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...) {
 8003a6e:	b40f      	push	{r0, r1, r2, r3}
 8003a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	f107 0520 	add.w	r5, r7, #32
 8003a7c:	f855 6b04 	ldr.w	r6, [r5], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 8003a80:	607d      	str	r5, [r7, #4]
	length = ts_formatlength(fmt, va);
 8003a82:	4629      	mov	r1, r5
 8003a84:	4630      	mov	r0, r6
 8003a86:	f7ff ffbe 	bl	8003a06 <ts_formatlength>
	va_end(va);
	if (length < 50) { // ok only for small default config MINIMAL_STACK_SIZE(128)
 8003a8a:	2831      	cmp	r0, #49	; 0x31
	length = ts_formatlength(fmt, va);
 8003a8c:	4604      	mov	r4, r0
	if (length < 50) { // ok only for small default config MINIMAL_STACK_SIZE(128)
 8003a8e:	dc19      	bgt.n	8003ac4 <iprintf+0x56>
		char buf[length];
 8003a90:	3407      	adds	r4, #7
 8003a92:	f024 0407 	bic.w	r4, r4, #7
	if (length < 50) { // ok only for small default config MINIMAL_STACK_SIZE(128)
 8003a96:	46e8      	mov	r8, sp
		char buf[length];
 8003a98:	ebad 0d04 	sub.w	sp, sp, r4
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4668      	mov	r0, sp
		va_start(va, fmt);
 8003aa2:	607d      	str	r5, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 8003aa4:	f7ff ff4e 	bl	8003944 <ts_formatstring>
		length = _write(1, buf, length);
 8003aa8:	4669      	mov	r1, sp
 8003aaa:	4602      	mov	r2, r0
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7ff fe73 	bl	8003798 <_write>
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	46c5      	mov	sp, r8
			va_end(va);
			free(buf);
		}
	}
	return length;
}
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac0:	b004      	add	sp, #16
 8003ac2:	4770      	bx	lr
		char * buf = malloc(length * sizeof(char));
 8003ac4:	f7ff fe8d 	bl	80037e2 <malloc>
		if (buf) {
 8003ac8:	4680      	mov	r8, r0
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d0f3      	beq.n	8003ab6 <iprintf+0x48>
			length = ts_formatstring(buf, fmt, va);
 8003ace:	462a      	mov	r2, r5
 8003ad0:	4631      	mov	r1, r6
			va_start(va, fmt);
 8003ad2:	607d      	str	r5, [r7, #4]
			length = ts_formatstring(buf, fmt, va);
 8003ad4:	f7ff ff36 	bl	8003944 <ts_formatstring>
			length = _write(1, buf, length);
 8003ad8:	4641      	mov	r1, r8
 8003ada:	4602      	mov	r2, r0
 8003adc:	2001      	movs	r0, #1
 8003ade:	f7ff fe5b 	bl	8003798 <_write>
 8003ae2:	4604      	mov	r4, r0
			free(buf);
 8003ae4:	4640      	mov	r0, r8
 8003ae6:	f7ff fe7e 	bl	80037e6 <free>
	return length;
 8003aea:	e7e4      	b.n	8003ab6 <iprintf+0x48>

08003aec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003aec:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003aee:	480b      	ldr	r0, [pc, #44]	; (8003b1c <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <MX_USART3_UART_Init+0x34>)
 8003af2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003af6:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003afa:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003afc:	2300      	movs	r3, #0
 8003afe:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b00:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b02:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b04:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b06:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b08:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b0a:	f7fe fb45 	bl	8002198 <HAL_UART_Init>
 8003b0e:	b118      	cbz	r0, 8003b18 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003b14:	f7ff be64 	b.w	80037e0 <Error_Handler>
 8003b18:	bd08      	pop	{r3, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200040f4 	.word	0x200040f4
 8003b20:	40004800 	.word	0x40004800

08003b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b24:	b510      	push	{r4, lr}
 8003b26:	4604      	mov	r4, r0
 8003b28:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2a:	2214      	movs	r2, #20
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	a803      	add	r0, sp, #12
 8003b30:	f000 f8dc 	bl	8003cec <memset>
  if(uartHandle->Instance==USART3)
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_UART_MspInit+0x68>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d125      	bne.n	8003b88 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b3c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8003b40:	2100      	movs	r1, #0
 8003b42:	9101      	str	r1, [sp, #4]
 8003b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b46:	4812      	ldr	r0, [pc, #72]	; (8003b90 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b50:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003b54:	9201      	str	r2, [sp, #4]
 8003b56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b58:	9102      	str	r1, [sp, #8]
 8003b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5c:	f042 0208 	orr.w	r2, r2, #8
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	9302      	str	r3, [sp, #8]
 8003b6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003b6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b76:	2301      	movs	r3, #1
 8003b78:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b7e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b80:	2307      	movs	r3, #7
 8003b82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b84:	f7fd f882 	bl	8000c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003b88:	b008      	add	sp, #32
 8003b8a:	bd10      	pop	{r4, pc}
 8003b8c:	40004800 	.word	0x40004800
 8003b90:	40020c00 	.word	0x40020c00

08003b94 <MX_USB_OTG_FS_PCD_Init>:
/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003b94:	480c      	ldr	r0, [pc, #48]	; (8003bc8 <MX_USB_OTG_FS_PCD_Init+0x34>)
{
 8003b96:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ba2:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003ba4:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003ba6:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003ba8:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003baa:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003bac:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003bae:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003bb0:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003bb2:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003bb4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003bb6:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003bb8:	f7fd fd84 	bl	80016c4 <HAL_PCD_Init>
 8003bbc:	b118      	cbz	r0, 8003bc6 <MX_USB_OTG_FS_PCD_Init+0x32>
  {
    Error_Handler();
  }

}
 8003bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003bc2:	f7ff be0d 	b.w	80037e0 <Error_Handler>
 8003bc6:	bd08      	pop	{r3, pc}
 8003bc8:	20004134 	.word	0x20004134

08003bcc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003bcc:	b530      	push	{r4, r5, lr}
 8003bce:	4604      	mov	r4, r0
 8003bd0:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd2:	2214      	movs	r2, #20
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	a803      	add	r0, sp, #12
 8003bd8:	f000 f888 	bl	8003cec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be2:	d12f      	bne.n	8003c44 <HAL_PCD_MspInit+0x78>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be4:	4c18      	ldr	r4, [pc, #96]	; (8003c48 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be6:	4819      	ldr	r0, [pc, #100]	; (8003c4c <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be8:	2500      	movs	r5, #0
 8003bea:	9501      	str	r5, [sp, #4]
 8003bec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8003bf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003bfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003c02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c0e:	230a      	movs	r3, #10
 8003c10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c12:	f7fd f83b 	bl	8000c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003c16:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003c1a:	a903      	add	r1, sp, #12
 8003c1c:	480b      	ldr	r0, [pc, #44]	; (8003c4c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003c1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c20:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003c24:	f7fd f832 	bl	8000c8c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c2e:	6363      	str	r3, [r4, #52]	; 0x34
 8003c30:	9502      	str	r5, [sp, #8]
 8003c32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c38:	6463      	str	r3, [r4, #68]	; 0x44
 8003c3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c40:	9302      	str	r3, [sp, #8]
 8003c42:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003c44:	b009      	add	sp, #36	; 0x24
 8003c46:	bd30      	pop	{r4, r5, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40020000 	.word	0x40020000

08003c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c88 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c56:	e003      	b.n	8003c60 <LoopCopyDataInit>

08003c58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c5e:	3104      	adds	r1, #4

08003c60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c60:	480b      	ldr	r0, [pc, #44]	; (8003c90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c62:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c68:	d3f6      	bcc.n	8003c58 <CopyDataInit>
  ldr  r2, =_sbss
 8003c6a:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c6c:	e002      	b.n	8003c74 <LoopFillZerobss>

08003c6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c70:	f842 3b04 	str.w	r3, [r2], #4

08003c74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c78:	d3f9      	bcc.n	8003c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c7a:	f7ff fe23 	bl	80038c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c7e:	f000 f811 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c82:	f7ff fd73 	bl	800376c <main>
  bx  lr    
 8003c86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003c88:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003c8c:	08003d84 	.word	0x08003d84
  ldr  r0, =_sdata
 8003c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c94:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003c98:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003c9c:	2000453c 	.word	0x2000453c

08003ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ca0:	e7fe      	b.n	8003ca0 <ADC_IRQHandler>
	...

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	4e0d      	ldr	r6, [pc, #52]	; (8003cdc <__libc_init_array+0x38>)
 8003ca8:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <__libc_init_array+0x3c>)
 8003caa:	1ba4      	subs	r4, r4, r6
 8003cac:	10a4      	asrs	r4, r4, #2
 8003cae:	2500      	movs	r5, #0
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	4e0b      	ldr	r6, [pc, #44]	; (8003ce4 <__libc_init_array+0x40>)
 8003cb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ce8 <__libc_init_array+0x44>)
 8003cb8:	f000 f820 	bl	8003cfc <_init>
 8003cbc:	1ba4      	subs	r4, r4, r6
 8003cbe:	10a4      	asrs	r4, r4, #2
 8003cc0:	2500      	movs	r5, #0
 8003cc2:	42a5      	cmp	r5, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ccc:	4798      	blx	r3
 8003cce:	3501      	adds	r5, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cd6:	4798      	blx	r3
 8003cd8:	3501      	adds	r5, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	08003d7c 	.word	0x08003d7c
 8003ce0:	08003d7c 	.word	0x08003d7c
 8003ce4:	08003d7c 	.word	0x08003d7c
 8003ce8:	08003d80 	.word	0x08003d80

08003cec <memset>:
 8003cec:	4402      	add	r2, r0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <_init>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr

08003d08 <_fini>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr
